{"version":3,"file":"lib_panel_lib_index_js-webpack_sharing_consume_default_lumino_signaling.5e9140d21efaac084b6f.js","mappings":"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wBAAwB,wCAAI,UAAU;AACzD,KAAK;AACL,gCAAgC,kDAAW;AAC3C,mBAAmB,2DAA2D;AAC9E,KAAK;AACL,yBAAyB,kDAAW;AACpC;AACA;AACA,oBAAoB,qCAAqC;AACzD,SAAS;AACT,mBAAmB,qDAAqD;AACxE,mBAAmB,wBAAwB,wCAAI,YAAY;AAC3D,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACjM2C;AACC;AACc;AAChB;AACM;AAC6C;;;;;;;;;;;;;;;;;;;;;;ACLd;AACrB;AACpB;AACU;AACA;AAChD;AACA;AACA;AACA;AACO;AACP,uBAAuB,wEAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,mBAAmB,EAAE,yDAAgB;AACrD;AACA;AACA,gBAAgB,YAAY,EAAE,yDAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+DAAa;AACjD;AACA,iBAAiB;AACjB;AACA;AACA,4CAA4C,+CAAS;AACrD,wCAAwC,gEAAc;AACtD;AACA,yBAAyB;AACzB,uCAAuC,0DAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;AChFiC;AAC1B,uBAAuB,+CAAM;AACpC;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;ACRgC;AAC1B,yBAAyB,+CAAM;AACtC;AACA;AACA;AACA,kBAAkB,gCAAgC;AAClD;AACA,KAAK;AACL;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;;ACdM;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oBAAoB;AACd;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACrB2C;AACS;AAC7C;AACP,2BAA2B,eAAe,EAAE,yBAAyB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,qDAAqD,YAAY,EAAE,KAAK;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0EAA0E,YAAY,EAAE,KAAK;AAC7F;AACA;AACA,yBAAyB,YAAY,EAAE,KAAK;AAC5C;AACA;AACO,8BAA8B,gDAAgD;AACrF;AACA;AACA;AACA;AACA;AACA,6EAA6E,SAAS,KAAK,GAAG;AAC9F;AACA,mCAAmC,uDAAiB;AACpD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,QAAQ,8DAAa;AACrB;AACA,SAAS;AACT;AACA;AACA,QAAQ,8DAAa;AACrB;AACA,SAAS;AACT;AACA;AACA;AACA;AACO;AACA;AACA;;;;;;;;;;;;;;;;AClE+B;;;;;;;;;;;;;;;;;;;;ACAa;AACzB;AACsB;AAChD;AACA;AACA;AACO,wBAAwB,6DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,CAAC,qDAAM,IAAI,+DAA+D;AAC7G;AACA;;;;;;;;;;;;;;;;;;;ACtBkD;AACxB;AAC1B;AACO;AACP;AACA,qBAAqB;AACrB;AACA;AACA,kBAAkB,0DAAmB,CAAC,uDAAc;AACpD,QAAQ,0DAAmB;AAC3B;AACA,YAAY,0DAAmB;AAC/B,gBAAgB,0DAAmB,QAAQ,cAAc;AACzD;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,uBAAuB,gEAAU;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;AC1BwD;AACb;AAC3C;AACA,kCAAkC,qDAAO;AACzC,yEAAyE,wBAAwB;AACjG,qBAAqB,qDAAO;AAC5B;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sEAAgB;AAC/B;AACA;;;;;;;;;;;;;;;;;;AC9BwD;AACe;AACpB;;;;;;;;;;;;;;;;;;ACFO;AAC8B;AACjB;AACxD;AACf;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wEAAW;AAChD;AACA,sBAAsB,qGAAsB;AAC5C,gBAAgB,oFAAmB;AACnC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACjB+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1CqD;AAC9C;AACP;AACA,0BAA0B,gDAAU,aAAa,OAAO,GAAG,QAAQ;AACnE;AACA,sBAAsB,iDAAe,uCAAuC,OAAO;AACnF;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC;AACA;AACA,kBAAkB,iDAAe;AACjC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBqD;AACR;AACyB;AAC3B;AACpC;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,0BAA0B,gDAAU,iBAAiB,WAAW;AAChE;AACA,SAAS;AACT;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP,YAAY,qFAAqF;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B,gDAAU;AACpC;AACA,sBAAsB,iDAAe,mCAAmC,KAAK;AAC7E;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP;AACA,2BAA2B,gDAAU,kBAAkB,oCAAoC;AAC3F;AACA;AACA;AACA;AACA,+BAA+B,uCAAG;AAClC,iBAAiB;AACjB;AACA;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP;AACA,+BAA+B,qDAAO,oDAAoD,IAAI;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oCAAoC,SAAS;AAC7C;AACA;AACA;AACA,0BAA0B,gDAAU,aAAa,OAAO;AACxD;AACA,sBAAsB,iDAAe,uCAAuC,OAAO;AACnF;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP;AACA,0BAA0B,gDAAU,aAAa,UAAU,uBAAuB,WAAW;AAC7F;AACA;AACA,SAAS;AACT;AACA,sBAAsB,iDAAe,qCAAqC,UAAU;AACpF;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,gDAAU,sBAAsB,WAAW,KAAK,oCAAoC;AAC9G;AACA,sBAAsB,iDAAe,wCAAwC,WAAW;AACxF;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAU,uBAAuB,WAAW;AACtE;AACA,sBAAsB,iDAAe,uCAAuC,WAAW;AACvF;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAU,uBAAuB,WAAW;AACtE;AACA,sBAAsB,iDAAe,yCAAyC,WAAW;AACzF;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAU,aAAa,UAAU,WAAW,UAAU;AAChF;AACA,sBAAsB,iDAAe,6CAA6C,WAAW,aAAa,UAAU;AACpH;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAU,iCAAiC,UAAU,mBAAmB,UAAU;AAC5G;AACA,sBAAsB,iDAAe,gDAAgD,WAAW,aAAa,UAAU;AACvH;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,yBAAyB,iDAAe;AACxC,sBAAsB,iDAAe;AACrC;AACA,kBAAkB,iDAAe;AACjC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,0BAA0B,gDAAU,aAAa,UAAU,WAAW,UAAU;AAChF;AACA,sBAAsB,iDAAe,6CAA6C,WAAW,aAAa,UAAU;AACpH;AACA;AACA,sBAAsB,iDAAe;AACrC;AACA;AACA;AACA;AACA,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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA,yBAAyB,iEAAU;AACnC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;ACzE8C;AAC+C;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,YAAY,oDAAY,CAAC,wDAAa;AACtC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,YAAY,oDAAY,CAAC,+DAAoB;AAC7C,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,YAAY,oDAAY,CAAC,gEAAqB;AAC9C,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;AC/BoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,iBAAiB,6DAAe;AAChC,mBAAmB,GAAG,6DAAe,oBAAoB;AACzD,iBAAiB,6DAAe;AAChC;;;;;;;;;;;;;;;;;ACdO;AACA;AACA;;;;;;;;;;;;;;;;ACF6D;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB,EAAE,sEAAgB;AACtD;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB,EAAE,sEAAgB;AACtD;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB,EAAE,sEAAgB;AACtD;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB,EAAE,sEAAgB;AACtD;AACA;AACA,SAAS;AACT,KAAK;AACL;;;;;;;;;;;;;;;;;AC/C0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,mBAAmB,GA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AAuC,EAAE,iFAAqB;AAC/D;AACP,qCAAqC,8CAAU;AAC/C;AACA;AACA;AACA,iBAAiB,8CAAU;AAC3B;AACA,6CAA6C,sDAAgB;AAC7D,wDAAwD,WAAW,IAAI,UAAU;AACjF,oDAAoD,mDAAe;AACnE,+CAA+C,WAAW,GAAG,eAAe;AAC5E;AACA;AACA,iBAAiB,8CAAU;AAC3B;AACA,6CAA6C,4DAAsB;AACnE,wDAAwD,eAAe;AACvE,oDAAoD,gDAAY;AAChE,+CAA+C,WAAW,GAAG,eAAe;AAC5E;AACA;AACA;AACA,yCAAyC,kDAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8CAAU;AACzE;AACA,aAAa;AACb;;;;;;;;;;;;;;;;;;;;;AC1CkC;AACwB;AACpB;AACuC;AACtE;AACP,YAAY,UAAU,EAAE,sEAAW;AACnC;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA,KAAK;AACL;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wBAAwB;AACpC;AACA,iBAAiB,8CAAU;AAC3B,yBAAyB;AACzB,iBAAiB,8CAAU;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,eAAe,8DAAsB;AACrC;AACA;AACA;AACA,eAAe,6DAAqB;AACpC;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACvDsD;AACY;AACzB;AACiB;AAC1D;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,sBAAsB,6CAAM;AAC5B,YAAY,UAAU,EAAE,sEAAW;AACnC,8BAA8B,iDAAU;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,4CAA4C;AACnE,SAAS;AACT;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA,2BAA2B,6CAA6C;AACxE,aAAa;AACb;AACA;AACA;AACA,+BAA+B,+CAA+C;AAC9E,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2DAA2D,iDAAe;AAC1E;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,6CAA6C;AACxE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAA2C;AAClE,SAAS;AACT;AACA,kCAAkC,qDAAO;AACzC;AACA;AACA;AACA;AACA,2BAA2B,4CAA4C;AACvE,aAAa;AACb;AACA;AACA;AACA,+BAA+B,8CAA8C;AAC7E,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2DAA2D,iDAAe;AAC1E;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,4CAA4C;AACvE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6CAA6C;AACpE,SAAS;AACT;AACA,kCAAkC,uDAAS;AAC3C;AACA;AACA;AACA;AACA,2BAA2B,8CAA8C;AACzE,aAAa;AACb;AACA;AACA;AACA,+BAA+B,gDAAgD;AAC/E,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,2BAA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CA,KAAK;AACL;AACA,cAAc,aAAa;AAC3B,KAAK;AACL;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,sBAAsB,cAAc;AACpC;AACA;AACA,KAAK;AACL;AACA,gBAAgB,eAAe;AAC/B;AACA,cAAc,cAAc;AAC5B,KAAK;AACL;AACA,gBAAgB,eAAe;AAC/B;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;AC5EgC;AAC1B,wBAAwB,+CAAM;AACrC;AACA;AACA,cAAc,SAAS;AACvB,KAAK;AACL;AACA,gBAAgB,UAAU;AAC1B;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;ACVgC;AAC1B,yBAAyB,+CAAM;AACtC;AACA;AACA;AACA;AACA,kBAAkB,gCAAgC;AAClD;AACA,KAAK;AACL;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;;;ACfgC;AAC+G;AACzI;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,oBAAoB,+CAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAqD;AAC3E;AACA;AACA,sBAAsB,gDAAgD;AACtE;AACA,kCAAkC,uDAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kCAAkC,+DAAiB;AACnD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,sBAAsB,2DAA2D;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA,iCAAiC,uDAAS;AAC1C,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAA2D;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,uDAAS;AAC3B,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAA2D;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iCAAiC,wDAAU;AAC3C,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAA2D;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iCAAiC,wDAAU;AAC3C,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAA2D;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,0DAAY;AAC9B,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAA2D;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,8DAAgB;AAClC,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,sBAAsB,2DAA2D;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB,OAAO;AACvB;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,gBAAgB,OAAO;AACvB;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;;;;;;;;;;;;ACxNM;AACP;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,8CAA8C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kBAAkB;AAC7D;AACA;AACA;AACA;AACA,SAAS;AACT,wDAAwD,iBAAiB;AACzE,kBAAkB,KAAK,EAAE,YAAY,IAAI,KAAK;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA;AACO;AACP;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B;AACA;AACA;AACO;AACP;AACA;AACA;AACA,CAAC,sBAAsB;AAChB;AACP;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;;;;;;;;;;;;;;;;AC5IC;AACpC;AACA;AACA;AACA;AACA;AACO;AACP,8CAA8C;AAC9C;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,aAAa,iDAAS;AACtB;AACA,4BAA4B,SAAS,IAAI;AACzC;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;;;;;;;;;;;;;;;;;;;;;;;ACzC0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,0DAAmB;AAC9B,iCAAiC,SAAS,KAAK;AAC/C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA,yCAAyC,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA,uBAAuB,SAAS,GAAG,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzFqD;AACxB;AACI;AACiC;AACtB;AAC6B;AAC1B;AACxC;AACP;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA,kBAAkB,oDAAgB;AAClC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB,oDAAK;AACrB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACO;AACP;AACA;AACA,0BAA0B,wCAAwC;AAClE;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,YAAY,yBAAyB,EAAE,iFAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB;AAC5D;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8EAAe;AAC/B;AACA,SAAS;AACT;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,QAAQ,4DAAiB;AACzB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HuC;AACM;AACD;AACF;AACsC;AACtB;AACS;AACE;AACa;AAC9B;AACA;AACqB;AACvC;AAC3B,2BAA2B,kBAAkB;AACpD,YAAY,mBAAmB,EAAE,kEAAW;AAC5C,YAAY,QAAQ,EAAE,sDAAQ;AAC9B;AACA,KAAK;AACL,0BAA0B,8CAAO;AACjC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,qFAAmB;AAC7C,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAM,CAAC,qDAAa;AAC/C;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAM,CAAC,qDAAa;AAC/C;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAM,CAAC,qDAAa;AAC/C;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0BAA0B,oFAAkB;AAC5C,SAAS;AACT;AACA;AACA;AACA,gCAAgC,WAAW,GAAG,aAAa;AAC3D;AACA,wCAAwC,gEAAkB;AAC1D,yBAAyB,oDAAY;AACrC,YAAY,oDAAY;AACxB;AACA;AACA;AACA;AACA,0CAA0C,2DAAa;AACvD,oBAAoB,kBAAkB,EAAE,kFAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,+DAAa;AACnC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa,EAAE,gEAAS;AACxC;AACA,uBAAuB,8CAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAa,kCAAkC,iBAAiB;AAC5E,SAAS;AACT;AACA,YAAY,+DAAa,wCAAwC,iBAAiB;AAClF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,UAAU,qBAAqB,yCAAK;AACnE;AACA,yEAAyE;AACzE,QAAQ,0DAAmB,CAAC,sDAAW,IAAI,mLAAmL;AAC9N;;;;;;;;;;;;;;;;;;;;;ACpJyC;AACiB;AACW;AACC;AAC/B;AAChC;AACP,YAAY,gCAAgC,EAAE,sEAAW;AACzD,kBAAkB,8EAAe;AACjC,8DAA8D,+CAAW;AACzE,IAAI,gDAAS;AACb;AACA,KAAK;AACL;AACA,mCAAmC,0DAAmB,CAAC,6EAAe,IAAI,4BAA4B;AACtG;;;;;;;;;;;;;;;;;;;;ACdyC;AACiC;AAC/B;AACU;AAC9C;AACP,YAAY,qCAAqC,EAAE,sEAAW;AAC9D,IAAI,gDAAS;AACb;AACA,KAAK;AACL,YAAY,0DAAmB,CAAC,uDAAc,gCAAgC,qEAAc,oBAAoB,0DAAmB,UAAU,gCAAgC;AAC7K,QAAQ,0DAAmB,CAAC,sDAAS,IAAI,kBAAkB,8BAA8B,qEAAc,UAAU,0DAAmB,UAAU,kCAAkC;AAChL,QAAQ,0DAAmB,UAAU,6CAA6C;AAClF,QAAQ,0DAAmB,UAAU,0CAA0C,4EAA4E,0DAAmB,UAAU,qCAAqC;AAC7N,QAAQ,0DAAmB,QAAQ,SAAS,mBAAmB;AAC/D;AACA,YAAY,0DAAmB,WAAW,8CAA8C;AACxF,QAAQ,0DAAmB;AAC3B;AACA;AACA,YAAY,0DAAmB,QAAQ,kHAAkH;AACzJ;AACA;AACA;AACA;AACA,YAAY,0DAAmB,QAAQ,wGAAwG,4BAA4B,0DAAmB,CAAC,uDAAc,2BAA2B,0DAAmB,CAAC,6DAAO,IAAI,8BAA8B;AACrS;;;;;;;;;;;;;;;;;;;;;ACzB0B;AACuC;AACA;AAC1B;AAC+B;AAC/D;AACP,YAAY,aAAa,EAAE,+EAAkB;AAC7C,kBAAkB,8EAAe;AACjC,2DAA2D,+CAAW;AACtE;AACA;AACA,kCAAkC,0DAAmB,CAAC,yEAAa,IAAI,0CAA0C;AACjH;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZmD;AACX;AACuC;AACqF;AAC1H;AACN;AACmB;AACT;AACM;AACM;AACnD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO,yBAAyB,wCAAwC;AACxE,YAAY,+CAA+C,EAAE,sEAAW;AACxE;AACA,YAAY,OAAO,EAAE,sEAAW;AAChC,oCAAoC,+CAAQ;AAC5C;AACA,eAAe,0DAAkB;AACjC;AACA,KAAK;AACL,mCAAmC,sDAAM;AACzC;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA,2FAA2F,iBAAiB;AAC5G;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,8CAAU;AACjC,2BAA2B,uCAAG,GAAG,qCAAqC;AACtE;AACA,gBAAgB,aAAa,EAAE,gEAAS;AACxC,mBAAmB,8CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,QAAQ,0DAAmB,WAAW,gCAAgC;AACtE,iCAAiC,0DAAmB,QAAQ,sDAAsD;AAClH;AACA;AACA;AACA,2BAA2B,0DAAmB,QAAQ,sDAAsD,iBAAiB,kEAA0B;AACvJ,kBAAkB,kEAA0B;AAC5C,kBAAkB,iEAAyB;AAC3C,YAAY,0DAAmB;AAC/B,YAAY,0DAAmB,UAAU,0BAA0B;AACnE,gBAAgB,0DAAmB,UAAU,SAAS,eAAe,2BAA2B,WAAW,4CAAQ,6BAA6B;AAChJ,gBAAgB,0DAAmB,UAAU,uDAAuD;AACpG,oBAAoB,0DAAmB,UAAU,2BAA2B;AAC5E,oBAAoB,0DAAmB,UAAU,4BAA4B;AAC7E,YAAY,0DAAmB;AAC/B,YAAY,0DAAmB,UAAU,oEAAoE;AAC7G,YAAY,0DAAmB;AAC/B;AACA,gBAAgB,0DAAmB,UAAU,SAAS,sCAAsC,oEAAoE,WAAW,4CAAQ,wBAAwB;AAC3M,YAAY,0DAAmB,CAAC,kDAAO,IAAI,wHAAwH,aAAa;AAChL,gBAAgB,0DAAmB,YAAY,iEAAyB;AACxE,YAAY,0DAAmB,UAAU,0CAA0C;AACnF,YAAY,0DAAmB;AAC/B,YAAY,0DAAmB,UAAU,0CAA0C;AACnF,YAAY,0DAAmB,UAAU,+CAA+C;AACxF;AACA;AACA,gBAAgB,0DAAmB,UAAU,SAAS,kCAAkC,2BAA2B,WAAW,4CAAQ,YAAY;AAClJ;AACA;AACA,YAAY,0DAAmB,QAAQ,gDAAgD;AACvF;AACA;AACA,gBAAgB,0DAAmB,QAAQ,MAAM,6DAAqB,oBAAoB;AAC1F;AACA,YAAY,0DAAmB,UAAU,2CAA2C;AACpF,gBAAgB,0DAAmB,UAAU,iDAAiD;AAC9F,oBAAoB,0DAAmB,CAAC,wEAAY,IAAI,qCAAqC;AAC7F,oCAAoC,kEAA0B;AAC9D,8CAA8C,0DAAmB,CAAC,yEAAa,IAAI,mQAAmQ;AACtV;;;;;;;;;;;;;;;;AC5I6B;;;;;;;;;;;;;;;;;;;;;;ACAW;AACJ;AAC4C;AACxC;AACoC;AACoB;AACzF,yBAAyB,yBAAyB;AACzD,gDAAgD,+CAAQ;AACxD,4CAA4C,+CAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oFAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oFAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,CAAC,uDAAc;AAC9C,QAAQ,0DAAmB,WAAW,gCAAgC;AACtE,YAAY,0DAAmB;AAC/B,YAAY,0DAAmB,UAAU,0BAA0B;AACnE,gBAAgB,0DAAmB,UAAU,SAAS,eAAe,2BAA2B,WAAW,4CAAQ,6BAA6B;AAChJ,gBAAgB,0DAAmB,UAAU,uDAAuD;AACpG,oBAAoB,0DAAmB,UAAU,2BAA2B;AAC5E,oBAAoB,0DAAmB,UAAU,4BAA4B;AAC7E,YAAY,0DAAmB;AAC/B,YAAY,0DAAmB,UAAU,oEAAoE;AAC7G,YAAY,0DAAmB;AAC/B;AACA,gBAAgB,0DAAmB,UAAU,SAAS,sCAAsC,oEAAoE,WAAW,4CAAQ,wBAAwB;AAC3M,YAAY,0DAAmB,CAAC,kDAAO,IAAI,wHAAwH,aAAa;AAChL,gBAAgB,0DAAmB,YAAY,iEAAyB;AACxE,YAAY,0DAAmB,UAAU,0CAA0C;AACnF,YAAY,0DAAmB;AAC/B,YAAY,0DAAmB,UAAU,0CAA0C;AACnF,YAAY,0DAAmB,QAAQ,gDAAgD;AACvF;AACA;AACA,gBAAgB,0DAAmB,QAAQ,MAAM,6DAAqB,oBAAoB;AAC1F;AACA,YAAY,0DAAmB,UAAU,2CAA2C;AACpF,gBAAgB,0DAAmB,UAAU,iDAAiD;AAC9F,oBAAoB,0DAAmB,CAAC,uEAAW,IAAI,mCAAmC;AAC1F,oBAAoB,0DAAmB,CAAC,yEAAa,IAAI,mFAAmF;AAC5I,oBAAoB,0DAAmB,CAAC,2EAAe,IAAI,2FAA2F;AACtJ;;;;;;;;;;;;;;;;;;;;;;;AClE0B;AAC6B;AACH;AACO;AACD;AACY;AAC/B;AAChC;AACP,YAAY,OAAO,EAAE,sEAAW;AAChC;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D,kBAAkB,8EAAe;AACjC,8DAA8D,+CAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,CAAC,uDAAc,kDAAkD,0DAAmB,CAAC,uDAAI;AACxH,QAAQ,0DAAmB,CAAC,sDAAG,IAAI,wBAAwB;AAC3D,YAAY,0DAAmB,CAAC,+DAAa,IAAI,UAAU;AAC3D,QAAQ,0DAAmB,CAAC,sDAAG,IAAI,mBAAmB;AACtD,YAAY,0DAAmB,CAAC,mEAAe,IAAI,yDAAyD,QAAQ,0DAAmB,CAAC,+DAAa,IAAI,UAAU;AACnK;;;;;;;;;;;;;;;;;;;;;;AC5B0B;AACO;AACQ;AACiC;AACnE,+BAA+B,mDAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAe,CAAC,0DAAmB,CAAC,kFAAU,IAAI,0BAA0B;AACpF;AACA;AACA,QAAQ,uEAA+B;AACvC;AACA;;;;;;;;;;;;;;;;;;;;;;;AClBmD;AACzB;AACY;AAC2B;AACJ;AACN;AAChD,2BAA2B,6DAAW;AAC7C;AACA,gBAAgB,0DAAmB,CAAC,uDAAc;AAClD,YAAY,0DAAmB,UAAU,oCAAoC;AAC7E,gBAAgB,0DAAmB,UAAU,+BAA+B;AAC5E,oBAAoB,0DAAmB,UAAU,kCAAkC;AACnF,wBAAwB,0DAAmB;AAC3C,wBAAwB,0DAAmB,CAAC,yEAAU;AACtD,oBAAoB,0DAAmB,CAAC,8CAAU;AAClD,oBAAoB,0DAAmB,CAAC,qEAAgB;AACxD,oBAAoB,0DAAmB,CAAC,+DAAa;AACrD;AACA;;;;;;;;;;;;;;;;;;;;;;AClB0B;AACO;AACQ;AACkC;AACpE,qCAAqC,mDAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAe,CAAC,0DAAmB,CAAC,mFAAgB,IAAI,gBAAgB;AAChF;AACA;AACA,QAAQ,uEAA+B;AACvC;AACA;;;;;;;;;;;;;;;;;;;;;AClB0B;AACyB;AACQ;AACc;AAClE,6BAA6B,6DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM,EAAE,iFAAqB;AAC7C,gBAAgB,0DAAmB,CAAC,uDAAc;AAClD,YAAY,0DAAmB,UAAU,oCAAoC,UAAU,0DAAmB,CAAC,qEAAY,IAAI,kHAAkH;AAC7O;AACA;;;;;;;;;;;;;;;;;;;;;;ACjB0B;AACa;AACgB;AACH;AACO;AACW;AAC/D;AACP,kBAAkB,8EAAe;AACjC,8DAA8D,+CAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,0DAAmB,CAAC,uDAAc,mCAAmC,0DAAmB,CAAC,uDAAI;AACzG,QAAQ,0DAAmB,CAAC,sDAAG,IAAI,wBAAwB;AAC3D,YAAY,0DAAmB,CAAC,+DAAa,IAAI,UAAU;AAC3D,QAAQ,0DAAmB,CAAC,sDAAG,IAAI,mBAAmB;AACtD,YAAY,0DAAmB,CAAC,mEAAe,IAAI,qDAAqD,QAAQ,0DAAmB,CAAC,+DAAa,IAAI,UAAU;AAC/J;;;;;;;;;;;;;;;;;;;;ACvByC;AACN;AACJ","sources":["webpack://@anaconda/panels/../../lib/handle_cookie/lib/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/api/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/BackLink/BackLink.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/List/CategoryList.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/List/CourseList.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/List/NotebookList.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/List/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/SearchBar/SearchBar.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/Tile/CategoryTile.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/Tile/CourseTile.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/Tile/NotebookTile.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/components/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/container/LMSApp.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/hooks/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/plugin.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/store/apiUrl.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/store/heap.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/types/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/utils/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/widgets/index.js","webpack://@anaconda/panels/../../lib/lms_notebooks/lib/widgets/lmsWidget/LMSWidget.js","webpack://@anaconda/panels/../../lib/notebook_load/lib/components/Dialog/warn_user_of_notebook_load.js","webpack://@anaconda/panels/../../lib/notebook_load/lib/components/utils/load_notebook.js","webpack://@anaconda/panels/../../lib/notebook_load/lib/index.js","webpack://@anaconda/panels/../../lib/notebook_load/lib/notebook_load_plugin.js","webpack://@anaconda/panels/../../lib/panel/lib/api/index.js","webpack://@anaconda/panels/../../lib/panel/lib/api/log.js","webpack://@anaconda/panels/../../lib/panel/lib/api/project.js","webpack://@anaconda/panels/../../lib/panel/lib/components/AppCounter/AppCounter.js","webpack://@anaconda/panels/../../lib/panel/lib/components/AppModal/AppModal.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Button/Button.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Button/FormButtons.js","webpack://@anaconda/panels/../../lib/panel/lib/components/ConfirmationDialog/ConfirmationDialog.js","webpack://@anaconda/panels/../../lib/panel/lib/components/ConfirmationDialog/index.js","webpack://@anaconda/panels/../../lib/panel/lib/components/DeploymentDashboard/Deployment.js","webpack://@anaconda/panels/../../lib/panel/lib/components/HelpButton/HelpButton.js","webpack://@anaconda/panels/../../lib/panel/lib/components/List/AppList.js","webpack://@anaconda/panels/../../lib/panel/lib/components/List/FeaturedAppList.js","webpack://@anaconda/panels/../../lib/panel/lib/components/List/ResourcesList.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/MenuApps/MenuAppActions.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/MenuApps/MenuAppHandler.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/MenuBuilder.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/MenuHelp/MenuHelpActions.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/MenuHelp/MenuHelpHandler.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/MenuHelp/MenuHelpUrls.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/MenuVersions/MenuVersionActions.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/MenuVersions/MenuVersionHandler.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Menu/index.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Tabs/Tabs.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Terminal/ReadOnlyTerminal.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Tile/AppTile.js","webpack://@anaconda/panels/../../lib/panel/lib/components/Tile/FeaturedAppTile.js","webpack://@anaconda/panels/../../lib/panel/lib/components/VersionsModal/ActionCellRenderer.js","webpack://@anaconda/panels/../../lib/panel/lib/components/VersionsModal/VersionCellRenderer.js","webpack://@anaconda/panels/../../lib/panel/lib/components/VersionsModal/VersionsModal.js","webpack://@anaconda/panels/../../lib/panel/lib/constants/index.js","webpack://@anaconda/panels/../../lib/panel/lib/hooks/OpenWidgetHook.js","webpack://@anaconda/panels/../../lib/panel/lib/hooks/polling.js","webpack://@anaconda/panels/../../lib/panel/lib/hooks/project.js","webpack://@anaconda/panels/../../lib/panel/lib/hooks/theme.js","webpack://@anaconda/panels/../../lib/panel/lib/icons.js","webpack://@anaconda/panels/../../lib/panel/lib/index.js","webpack://@anaconda/panels/../../lib/panel/lib/panel_plugin.js","webpack://@anaconda/panels/../../lib/panel/lib/state/app-shell-zustand/store.js","webpack://@anaconda/panels/../../lib/panel/lib/state/apps-zustand/feature-flags.js","webpack://@anaconda/panels/../../lib/panel/lib/state/apps-zustand/heap.js","webpack://@anaconda/panels/../../lib/panel/lib/state/apps-zustand/store.js","webpack://@anaconda/panels/../../lib/panel/lib/types/index.js","webpack://@anaconda/panels/../../lib/panel/lib/utils/app-cues.js","webpack://@anaconda/panels/../../lib/panel/lib/utils/index.js","webpack://@anaconda/panels/../../lib/panel/lib/utils/panel.js","webpack://@anaconda/panels/../../lib/panel/lib/views/AppVersionsView.js","webpack://@anaconda/panels/../../lib/panel/lib/views/FeaturedAppsView.js","webpack://@anaconda/panels/../../lib/panel/lib/views/MyAppsView.js","webpack://@anaconda/panels/../../lib/panel/lib/views/ResourcesView.js","webpack://@anaconda/panels/../../lib/panel/lib/views/createAppView.js","webpack://@anaconda/panels/../../lib/panel/lib/views/index.js","webpack://@anaconda/panels/../../lib/panel/lib/views/viewAppConfig.js","webpack://@anaconda/panels/../../lib/panel/lib/widgets/CreateAppWidget.js","webpack://@anaconda/panels/../../lib/panel/lib/widgets/DeploymentWidget.js","webpack://@anaconda/panels/../../lib/panel/lib/widgets/MyAppsWidget.js","webpack://@anaconda/panels/../../lib/panel/lib/widgets/ReadOnlyTerminalWidget.js","webpack://@anaconda/panels/../../lib/panel/lib/widgets/ResourceWidget.js","webpack://@anaconda/panels/../../lib/panel/lib/widgets/ViewAppWidget.js","webpack://@anaconda/panels/../../lib/panel/lib/widgets/index.js"],"sourcesContent":["import Cookies from \"js-cookie\";\nfunction parseJson(data) {\n    try {\n        return JSON.parse(data);\n    }\n    catch (error) {\n        console.error(error);\n        return null;\n    }\n}\nlet cachedParams = {};\nexport function parseParams(cookieName) {\n    if (cachedParams && cachedParams[cookieName] != null) {\n        return cachedParams[cookieName];\n    }\n    const paramsB64 = Cookies.get(cookieName);\n    // remove the cookie so the user is not prompted again if the page is refreshed\n    // Remove the cookie in a timeout, due to the migration to the monorepo. This is a hack but a short-lived one\n    setTimeout(() => {\n        Cookies.remove(cookieName, {\n            path: \"/\",\n            domain: `.${window.location.hostname}`,\n            sameSite: \"Strict\",\n        });\n    }, 5000);\n    if (!paramsB64) {\n        return null;\n    }\n    const data = parseJson(atob(paramsB64.replaceAll(\".\", \"=\")));\n    if (data == null) {\n        return null;\n    }\n    return (cachedParams[cookieName] = cachedParams[cookieName]\n        ? { ...cachedParams[cookieName], ...data }\n        : data);\n}\nexport function clearParsedCookieCache() {\n    cachedParams = {};\n}\n","import { backend } from \"@anaconda/shared\";\nimport { useEffect, useState } from \"react\";\nimport { FetchStatus } from \"../types\";\nexport async function fetchNotebookData(notebook_path, retries = 1) {\n    while (retries >= 0) {\n        try {\n            // Try to fetch the notebook data\n            const response = await backend.backendFetch(`aext_lms_notebooks_server/notebook?notebook_path=${notebook_path}`);\n            return backend.handleProxyResponse(response);\n        }\n        catch (error) {\n            // In case of an error, log it and check if we should retry\n            console.error(\"Error fetching notebook data\", error);\n            if (retries > 0) {\n                // If retries are left, wait for 1 second and then retry\n                await new Promise((resolve) => setTimeout(resolve, 1000));\n            }\n            else {\n                // If no retries are left, throw the error\n                throw error;\n            }\n        }\n        retries--;\n    }\n}\nexport const useLMSContentFetch = () => {\n    const [categories, setCategories] = useState([]);\n    const [error, setError] = useState(null);\n    const [status, setStatus] = useState(FetchStatus.IDLE);\n    useEffect(() => {\n        setStatus(FetchStatus.LOADING);\n        backend\n            .backendFetch(\"aext_lms_notebooks_server/lms-content\")\n            .then((r) => backend.handleProxyResponse(r))\n            .then((response) => {\n            setCategories(response);\n            setStatus(FetchStatus.SUCCESS);\n        })\n            .catch((e) => {\n            console.error(\"LMS error\", e);\n            setError(e);\n            setStatus(FetchStatus.ERROR);\n        });\n    }, []);\n    return { categories, error, status };\n};\n","import React from \"react\";\nexport const BackLink = ({ label, onClick }) => {\n    return (React.createElement(\"div\", { className: \"anaconda-lms-back-link\", onClick: onClick },\n        React.createElement(\"span\", { className: \"anaconda-lms-back-link__icon\" }),\n        label));\n};\n","import React, { useMemo } from \"react\";\nimport { CategoryTile } from \"../Tile/CategoryTile\";\nimport { useHeapAnalytics } from \"../../store/heap\";\nexport const CategoryList = ({ categories, onCategoryClick, }) => {\n    const heapAnalytics = useHeapAnalytics((state) => ({\n        registerEvent: state.registerEvent,\n    }));\n    const handleClick = useMemo(() => {\n        return (category) => {\n            heapAnalytics.registerEvent(\"LMS Notebooks - Category Click\", {\n                category: category.title,\n            });\n            onCategoryClick(category.courses, category);\n        };\n    }, [onCategoryClick]);\n    return (React.createElement(\"div\", { className: \"anaconda-lms-category-list\", \"data-testid\": \"category-list\" }, categories.map((category, index) => (React.createElement(\"div\", { \"data-testid\": `category-tile-${category.title}`, key: category.title, onClick: () => handleClick(category) },\n        React.createElement(CategoryTile, { categoryTitle: category.title, coursesCount: category.courses.length }))))));\n};\n","import React, { useMemo } from \"react\";\nimport { CourseTile } from \"../Tile/CourseTile\";\nimport { useHeapAnalytics } from \"../../store/heap\";\nexport const CourseList = ({ courses, onCourseClick, categorySelected, }) => {\n    const heapAnalytics = useHeapAnalytics((state) => ({\n        registerEvent: state.registerEvent,\n    }));\n    const handleClick = useMemo(() => {\n        return (course) => {\n            heapAnalytics.registerEvent(\"LMS Notebooks - Course Click\", {\n                course: course.title,\n            });\n            onCourseClick(course);\n        };\n    }, [onCourseClick]);\n    return (React.createElement(\"div\", { className: \"anaconda-lms-course-list\", \"data-testid\": \"course-list\" }, courses.map((course, index) => (React.createElement(\"div\", { \"data-testid\": `course-tile-${course.title}`, key: course.title, onClick: () => handleClick(course) },\n        React.createElement(CourseTile, { courseTitle: course.title, categoryTitle: categorySelected ? categorySelected.title : \"\", courseType: course.course_type, courseIcon: course.course_icon, courseDescription: course.description, notebooksCount: course.notebooks.length }))))));\n};\n","import React from \"react\";\nimport { LMSAppConstants } from \"../../types\";\nimport { NotebookTile } from \"../Tile/NotebookTile\";\nexport const NotebookList = ({ notebooks, courseSelected, categorySelected, app, }) => {\n    const handleLinkClick = (lmsLink) => {\n        if (lmsLink) {\n            window.open(lmsLink, \"_blank\");\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"anaconda-lms-header\" },\n            React.createElement(\"div\", null,\n                React.createElement(\"h3\", null, courseSelected?.title),\n                React.createElement(\"h4\", null, LMSAppConstants.NOTEBOOK_SUBTITLE))),\n        React.createElement(\"div\", { className: \"anaconda-lms-notebook-list\", \"data-testid\": \"notebook-list\" },\n            courseSelected?.lms_link ? (React.createElement(\"div\", { className: \"anaconda-lms-nb-learning-link-div\", onClick: () => handleLinkClick(courseSelected?.lms_link || \"\") },\n                React.createElement(\"div\", { className: \"anaconda-lms-nb-learning-link-text\" }, \"Open in Anaconda Learning\"),\n                React.createElement(\"div\", { className: \"anaconda-lms-chevron-right-icon\" }))) : (React.createElement(\"div\", { className: \"anaconda-lms-nb-learning-link-text-disabled\" }, \"Anaconda Learning is not available for this course.\")),\n            notebooks.map((notebook, index) => (React.createElement(\"div\", { key: notebook.title },\n                React.createElement(NotebookTile, { app: app, notebook: notebook, categorySelected: categorySelected, courseSelected: courseSelected })))))));\n};\n","export * from \"./CategoryList\";\nexport * from \"./CourseList\";\nexport * from \"./NotebookList\";\n","import React from \"react\";\nexport const SearchBar = ({ query, onSearch, placeholder, disabled, }) => {\n    const handleInputChange = (event) => {\n        event.stopPropagation();\n        if (onSearch) {\n            onSearch(event.target.value);\n        }\n    };\n    return (React.createElement(\"div\", { className: \"anaconda-lms-search-field\" },\n        React.createElement(\"div\", { className: \"anaconda-lms-search-icon\" }),\n        React.createElement(\"input\", { disabled: disabled, type: \"search\", value: query, onChange: handleInputChange, placeholder: placeholder, autoFocus: true })));\n};\n","import React from \"react\";\nexport const CategoryTile = ({ categoryTitle, coursesCount, }) => {\n    // @TODO refactor component using compound components\n    return (React.createElement(\"div\", { className: \"anaconda-lms-cat-tile\" },\n        React.createElement(\"div\", { className: \"anaconda-lms-cat-frame\" },\n            React.createElement(\"div\", { className: \"anaconda-lms-cat-gradient\" }),\n            React.createElement(\"div\", { className: \"anaconda-lms-cat-div\" },\n                React.createElement(\"div\", { className: \"anaconda-lms-cat-header-text\" }, categoryTitle),\n                React.createElement(\"div\", { className: \"anaconda-lms-cat-course-div\" },\n                    React.createElement(\"div\", { className: \"anaconda-lms-icon-list\" }),\n                    React.createElement(\"div\", { className: \"anaconda-lms-cat-course-num\" },\n                        coursesCount,\n                        \" \",\n                        coursesCount > 1 ? \"Courses\" : \"Course\"))))));\n};\n","import React from \"react\";\nimport { copyToClipboard } from \"../../utils\";\nimport { useCloudApiUrl } from \"../../store/apiUrl\";\nexport const CourseTile = ({ courseTitle, categoryTitle, courseType, courseIcon, courseDescription, notebooksCount, }) => {\n    // @TODO refactor component using compound components\n    const { apiUrl } = useCloudApiUrl.getState();\n    const openCourseLinkHandler = (event) => {\n        event.stopPropagation();\n        copyToClipboard(`${apiUrl}/nbserve/open_lms?category_title=${categoryTitle}&course_title=${courseTitle}`, \"Link to LMS course copied to clipboard\", \"An error occurred when copying LMS course link\");\n    };\n    return (React.createElement(\"div\", { className: \"anaconda-lms-course-tile\" },\n        React.createElement(\"div\", { className: \"anaconda-lms-course-frame\" },\n            React.createElement(\"div\", { className: \"anaconda-lms-course-gradient\" }),\n            React.createElement(\"div\", { className: \"anaconda-lms-course-title-div\" },\n                React.createElement(\"div\", { className: \"anaconda-lms-course-list-wrapper\" },\n                    React.createElement(\"div\", { className: courseIcon }),\n                    React.createElement(\"div\", { className: \"anaconda-lms-course-header\" }, courseType)),\n                React.createElement(\"p\", { className: \"anaconda-lms-course-header-desc\" }, courseTitle)),\n            React.createElement(\"div\", { className: \"anaconda-lms-course-body-div\" },\n                React.createElement(\"p\", { className: \"anaconda-lms-course-body-text\" }, courseDescription),\n                React.createElement(\"div\", null,\n                    React.createElement(\"div\", { className: \"anaconda-lms-course-body-frame\" },\n                        React.createElement(\"div\", { className: \"anaconda-lms-notebook-icon\" }),\n                        React.createElement(\"div\", { className: \"anaconda-lms-cat-course-num\" },\n                            notebooksCount,\n                            \" \",\n                            notebooksCount > 1 ? \"Notebooks\" : \"Notebook\"),\n                        React.createElement(\"div\", null,\n                            React.createElement(\"i\", { className: \"fas fa-link\", style: { fontSize: \"17px\" }, onClick: openCourseLinkHandler }))))))));\n};\n","import React from \"react\";\nimport { useHeapAnalytics } from \"../../store/heap\";\nimport { openNotebook } from \"../../utils\";\nexport const NotebookTile = ({ app, notebook, courseSelected, categorySelected, }) => {\n    const heapAnalytics = useHeapAnalytics((state) => ({\n        registerEvent: state.registerEvent,\n    }));\n    const openNotebookHandler = (app, notebook) => {\n        heapAnalytics.registerEvent(\"LMS Notebooks - Notebook Click\", {\n            category: notebook.title,\n        });\n        openNotebook({\n            app,\n            notebook_title: notebook.title,\n            notebook_path: notebook.notebook_path,\n            path: `anaconda-learning/${categorySelected?.title}/${courseSelected?.title}`,\n        }).catch((err) => console.error(err));\n    };\n    // @TODO refactor component using compound components\n    return (React.createElement(\"div\", { className: \"anaconda-lms-nb-tile\" },\n        React.createElement(\"div\", { className: \"anaconda-lms-nb-frame\" },\n            React.createElement(\"div\", { className: \"anaconda-lms-nb-gradient\" }),\n            React.createElement(\"div\", { className: \"anaconda-lms-nb-content\" },\n                React.createElement(\"div\", { className: \"anaconda-lms-nb-title-container\" },\n                    React.createElement(\"div\", { className: \"anaconda-lms-nb-title-div\" },\n                        React.createElement(\"div\", { className: \"anaconda-lms-notebook-icon\" }),\n                        React.createElement(\"div\", { className: \"anaconda-lms-nb-title-text\" },\n                            notebook.title,\n                            \".ipynb\"))),\n                React.createElement(\"div\", { className: \"anaconda-lms-nb-download-div\" },\n                    React.createElement(\"div\", { \"data-testid\": `notebook-tile-${notebook.title}`, onClick: () => {\n                            openNotebookHandler(app, notebook);\n                        }, className: \"anaconda-lms-nb-download-text\" }, \"Open in new notebook\"),\n                    React.createElement(\"div\", { className: \"anaconda-lms-chevron-right-icon\" }))))));\n};\n","export * from \"./List\";\nexport * from \"./SearchBar/SearchBar\";\nexport * from \"./BackLink/BackLink\";\n","import React, { useCallback, useEffect, useRef } from \"react\";\nimport DotLoader from \"react-spinners/DotLoader\";\nimport { CategoryList, CourseList, NotebookList, SearchBar, } from \"../components\";\nimport { BackLink } from \"../components/BackLink/BackLink\";\nimport { FetchStatus, LMSAppConstants, View, } from \"../types\";\nimport { useLMSAppState } from \"../hooks\";\nimport { useHeapAnalytics } from \"../store/heap\";\n// Create container component\nexport const LMSApp = ({ app, urlParams }) => {\n    const heapAnalytics = useHeapAnalytics((state) => ({\n        registerEvent: state.registerEvent,\n    }));\n    const { state, setView, setQuery, setCourses, setNotebooks, fetchStatus, setSelectedCategory, } = useLMSAppState(urlParams, app, heapAnalytics);\n    const searchDebounceTimer = useRef(null);\n    const handleSearch = (query) => {\n        if (searchDebounceTimer.current) {\n            clearTimeout(searchDebounceTimer.current);\n        }\n        setQuery(query);\n        searchDebounceTimer.current = window.setTimeout(() => {\n            if (query) {\n                const filteredCourses = state.data.categories.flatMap((category) => category.courses.filter((course) => course.course_name.toLowerCase().includes(query.toLowerCase()) ||\n                    course.notebooks.some((notebook) => notebook.title.toLowerCase().includes(query.toLowerCase()))));\n                if (filteredCourses.length === 0) {\n                    setView(View.NO_RESULTS);\n                }\n                else {\n                    setCourses(filteredCourses);\n                }\n            }\n            else if (state.categorySelected) {\n                setCourses(state.categorySelected.courses);\n            }\n            else {\n                setView(View.CATEGORIES);\n            }\n        }, LMSAppConstants.SEARCH_DEBOUNCE_TIME);\n    };\n    const handleCourseClick = (course) => {\n        setNotebooks(course);\n        const selectedCategoryForFilteredCourse = state.data.categories.find((category) => category.courses.includes(course));\n        setSelectedCategory(selectedCategoryForFilteredCourse);\n    };\n    useEffect(() => {\n        return () => {\n            if (searchDebounceTimer.current) {\n                clearTimeout(searchDebounceTimer.current);\n            }\n        };\n    }, []);\n    const handleBackCategoriesClick = useCallback(() => {\n        setView(View.CATEGORIES);\n        setQuery(\"\");\n    }, []);\n    return (React.createElement(\"div\", { className: \"anaconda-lms-launcher\" },\n        state.currentView === View.CATEGORIES && (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: \"anaconda-lms-header\" },\n                React.createElement(\"h3\", null, LMSAppConstants.LMS_TITLE),\n                React.createElement(\"h4\", null, LMSAppConstants.LMS_SUBTITLE)),\n            React.createElement(\"div\", { className: \"anaconda-lms-launcher-toolbar\" },\n                React.createElement(SearchBar, { placeholder: LMSAppConstants.SEARCH_PLACEHOLDER, disabled: fetchStatus === FetchStatus.LOADING, query: state.querySearch, onSearch: handleSearch })),\n            fetchStatus === FetchStatus.LOADING ? (React.createElement(\"div\", { className: \"anaconda-lms-loading-container\" },\n                React.createElement(DotLoader, { color: \"#0ccb4a\" }))) : (React.createElement(CategoryList, { categories: state.data.categories, onCategoryClick: setCourses })))),\n        state.currentView === View.COURSES && (React.createElement(React.Fragment, null,\n            React.createElement(BackLink, { label: \"Back to Categories\", onClick: handleBackCategoriesClick }),\n            React.createElement(\"div\", { className: \"anaconda-lms-header\" },\n                React.createElement(\"h3\", null, !state.querySearch && state.categorySelected?.title\n                    ? state.categorySelected?.title\n                    : LMSAppConstants.LMS_TITLE)),\n            React.createElement(\"div\", { className: \"anaconda-lms-launcher-toolbar\" },\n                React.createElement(SearchBar, { placeholder: LMSAppConstants.SEARCH_PLACEHOLDER, query: state.querySearch, onSearch: handleSearch })),\n            React.createElement(CourseList, { courses: state.data.courses, onCourseClick: handleCourseClick, categorySelected: state.categorySelected }))),\n        state.currentView === View.NOTEBOOKS && (React.createElement(React.Fragment, null,\n            React.createElement(BackLink, { label: state.querySearch ? \"Back to Search\" : \"Back to Courses\", onClick: () => setView(View.COURSES) }),\n            React.createElement(NotebookList, { app: app, courseSelected: state.courseSelected, categorySelected: state.categorySelected, notebooks: state.data.notebooks }))),\n        state.currentView === View.NO_RESULTS && (React.createElement(React.Fragment, null,\n            React.createElement(BackLink, { label: \"Back to Categories\", onClick: handleBackCategoriesClick }),\n            React.createElement(\"div\", { className: \"anaconda-lms-header\" },\n                React.createElement(\"h3\", null, !state.querySearch && state.categorySelected?.title\n                    ? state.categorySelected?.title\n                    : LMSAppConstants.LMS_TITLE)),\n            React.createElement(\"div\", { className: \"anaconda-lms-launcher-toolbar\" },\n                React.createElement(SearchBar, { placeholder: LMSAppConstants.SEARCH_PLACEHOLDER, query: state.querySearch, onSearch: handleSearch })),\n            React.createElement(\"div\", { className: \"anaconda-lms-no-results\" },\n                React.createElement(\"div\", { className: \"anaconda-lms-tile-left-border\" }),\n                React.createElement(\"span\", { className: \"anaconda-lms-no-results-message\" }, \"No content found.\")))),\n        state.currentView === View.ERROR && (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: \"anaconda-lms-header\" },\n                React.createElement(\"h3\", null, LMSAppConstants.LMS_TITLE),\n                React.createElement(\"h4\", null, LMSAppConstants.LMS_SUBTITLE)),\n            React.createElement(\"div\", { className: \"anaconda-lms-launcher-toolbar\" },\n                React.createElement(SearchBar, { placeholder: LMSAppConstants.SEARCH_PLACEHOLDER, disabled: true })),\n            React.createElement(\"div\", { className: \"anaconda-lms-error\" },\n                React.createElement(\"div\", { className: \"anaconda-lms-tile-left-border\" }),\n                React.createElement(\"div\", { className: \"anaconda-lms-error-message\" }, \"Something went wrong. Please try again later.\"))))));\n};\n","import { useCallback, useEffect, useReducer } from \"react\";\nimport { useLMSContentFetch } from \"../api\";\nimport { FetchStatus, View, } from \"../types\";\nimport { findCategoryByTitle, findCourseByTitle, findNotebookByTitle, openNotebook as openNotebookHandler, } from \"../utils\";\nconst initialLMSState = {\n    data: {\n        categories: [],\n        courses: [],\n        notebooks: [],\n    },\n    currentView: View.CATEGORIES,\n    categorySelected: null,\n    courseSelected: null,\n    querySearch: \"\",\n};\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"SET_QUERY\":\n            return { ...state, querySearch: action.query };\n        case \"SET_DATA\":\n            return { ...state, data: { ...state.data, ...action.data } };\n        case \"SET_VIEW\":\n            return { ...state, currentView: action.view };\n        case \"SET_SELECTED_CATEGORY\":\n            return { ...state, categorySelected: action.category };\n        case \"SET_SELECTED_COURSE\":\n            return { ...state, courseSelected: action.course };\n        case \"RESET_STATE\":\n            return {\n                ...initialLMSState,\n                data: {\n                    ...initialLMSState.data,\n                    categories: state.data.categories,\n                },\n            };\n        default:\n            return state;\n    }\n};\nexport const useLMSAppState = (urlParams, app, heapAnalytics, initialState = initialLMSState) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { categories, status } = useLMSContentFetch(); // Encapsulated inside the hook\n    const openNotebook = useCallback((urlParams, categories, app) => {\n        // Find the category\n        const category = findCategoryByTitle(categories, urlParams.categoryTitle || \"\");\n        if (!category) {\n            // If the category is not found, show the No Results view\n            setView(View.NO_RESULTS);\n            return;\n        } // Find the course\n        const course = findCourseByTitle(category, urlParams.courseTitle || \"\");\n        if (!course) {\n            // If the course is not found, show the No Results view\n            setView(View.NO_RESULTS);\n            return;\n        } // Find the notebook\n        const notebook = findNotebookByTitle(course, urlParams.notebookTitle || \"\");\n        if (!notebook) {\n            // If the notebook is not found, show the No Results view\n            setView(View.NO_RESULTS);\n            return;\n        }\n        try {\n            heapAnalytics.registerEvent(\"LMS Notebooks - Open notebook from URL\", {\n                category: `open_lms?${category.title}/${course.title}/${notebook.title}`,\n            });\n        }\n        catch (err) {\n            console.error(\"LMS openNotebook error\", err);\n        }\n        setCourses(category.courses, category);\n        setNotebooks(course);\n        openNotebookHandler({\n            app,\n            notebook_title: notebook.title,\n            notebook_path: notebook.notebook_path,\n            path: `anaconda-learning/${category?.title}/${course?.title}`,\n        }).catch((err) => console.error(err));\n        return;\n    }, []);\n    const openNotebookList = useCallback((urlParams, categories) => {\n        // Find the category\n        const category = findCategoryByTitle(categories, urlParams.categoryTitle || \"\");\n        // Find the course\n        if (category) {\n            const course = findCourseByTitle(category, urlParams.courseTitle || \"\");\n            // Set the notebook list\n            if (course) {\n                setCourses(category.courses, category);\n                setNotebooks(course);\n                try {\n                    heapAnalytics.registerEvent(\"LMS Notebooks - Open notebook list from course URL\", {\n                        category: `open_lms?${category.title}/${course.title}`,\n                    });\n                }\n                catch (err) {\n                    console.error(\"LMS openNotebook error\", err);\n                }\n                return;\n            }\n        }\n        // If the course or category is not found, show the No Results view\n        setView(View.NO_RESULTS);\n    }, []);\n    const openCourseList = useCallback((urlParams, categories) => {\n        const category = findCategoryByTitle(categories, urlParams.categoryTitle || \"\");\n        if (category) {\n            setCourses(category.courses, category);\n            try {\n                heapAnalytics.registerEvent(\"LMS Notebooks - Open courses list from category URL\", {\n                    category: `open_lms?${category.title}`,\n                });\n            }\n            catch (err) {\n                console.error(\"LMS openNotebook error\", err);\n            }\n        }\n        else {\n            // If the category is not found, show the No Results view\n            setView(View.NO_RESULTS);\n        }\n    }, []);\n    useEffect(() => {\n        console.log(\"LMS useLMSAppState\", { urlParams });\n        if (status === FetchStatus.ERROR) {\n            dispatch({ type: \"SET_VIEW\", view: View.ERROR });\n        }\n        else if (status === FetchStatus.SUCCESS) {\n            setCategories(categories);\n            if (urlParams) {\n                const { categoryTitle, courseTitle, notebookTitle, openLMS } = urlParams;\n                if (categoryTitle && courseTitle && notebookTitle) {\n                    openNotebook(urlParams, categories, app);\n                }\n                else if (categoryTitle && courseTitle) {\n                    openNotebookList(urlParams, categories);\n                }\n                else if (categoryTitle) {\n                    openCourseList(urlParams, categories);\n                }\n                else if (openLMS) {\n                    heapAnalytics.registerEvent(\"LMS Notebooks - Open LMS extension with URL\", {\n                        category: `open_lms`,\n                    });\n                }\n            }\n            if (categories.length === 0) {\n                setView(View.NO_RESULTS);\n            }\n        }\n    }, [categories, status, urlParams]);\n    const setView = useCallback((view) => {\n        dispatch({ type: \"SET_VIEW\", view });\n        if (view === View.CATEGORIES) {\n            // Perform a clean up\n            dispatch({ type: \"RESET_STATE\" });\n        }\n    }, []);\n    const setQuery = useCallback((query) => {\n        dispatch({ type: \"SET_QUERY\", query });\n    }, []);\n    const setCategories = useCallback((categories) => {\n        dispatch({ type: \"SET_DATA\", data: { categories } });\n    }, []);\n    const setCourses = useCallback((courses, categorySelected = null) => {\n        dispatch({ type: \"SET_DATA\", data: { courses: courses } });\n        if (categorySelected) {\n            dispatch({ type: \"SET_SELECTED_CATEGORY\", category: categorySelected });\n        }\n        dispatch({ type: \"SET_VIEW\", view: View.COURSES });\n    }, []);\n    const setSelectedCategory = useCallback((categorySelected = null) => {\n        dispatch({ type: \"SET_SELECTED_CATEGORY\", category: categorySelected });\n    }, []);\n    const setNotebooks = useCallback((courseSelected) => {\n        dispatch({\n            type: \"SET_DATA\",\n            data: { notebooks: courseSelected.notebooks },\n        });\n        dispatch({ type: \"SET_SELECTED_COURSE\", course: courseSelected });\n        dispatch({ type: \"SET_VIEW\", view: View.NOTEBOOKS });\n    }, []);\n    return {\n        state,\n        fetchStatus: status,\n        setView,\n        setQuery,\n        setCategories,\n        setCourses,\n        setSelectedCategory,\n        setNotebooks,\n        openNotebook,\n    };\n};\n","import { useLMSContentFetch } from \"./api\";\nimport { NotebookList } from \"./components\";\nimport { CourseTile } from \"./components/Tile/CourseTile\";\nimport LmsNotebooksPlugin from \"./plugin\";\nimport { useCloudApiUrl } from \"./store/apiUrl\";\nexport { LmsNotebooksPlugin, useLMSContentFetch, CourseTile, NotebookList, useCloudApiUrl, };\n","import { DOMUtils, MainAreaWidget, WidgetTracker } from \"@jupyterlab/apputils\";\nimport { parseParams } from \"@anaconda/handle_cookie_lib\";\nimport { LMSWidget } from \"./widgets\";\nimport { useHeapAnalytics } from \"./store/heap\";\nimport { useCloudApiUrl } from \"./store/apiUrl\";\nconst lmsNotebooksLauncherCommand = \"anaconda-learning-launcher:open\";\nconst lmsNotebooksLauncherCategory = \"Anaconda\";\nconst lmsNotebooksLauncherWidgetTitleLabel = \"Anaconda Learning\";\nconst lmsNotebooksLauncherLabel = \"Anaconda Learning\";\nexport function actOnCookieContents() {\n    const lms_params = parseParams(\"lms_params\");\n    if (lms_params && lms_params?.open_lms) {\n        return {\n            openLMS: true,\n            categoryTitle: lms_params?.category_title,\n            courseTitle: lms_params?.course_title,\n            notebookTitle: lms_params?.notebook_title,\n        };\n    }\n    return null;\n}\nexport default class Plugin {\n    async activate(app, opts) {\n        const coreReady = await opts.corePlugin.ready();\n        if (!coreReady.featureFlag.getBool(\"monorepo-lms-notebooks\", false)) {\n            return;\n        }\n        console.log(\"[Monorepo] Enabling the lms-notebooks plugin\");\n        const LMSConfigParams = actOnCookieContents();\n        if (LMSConfigParams) {\n            app.restored.then(() => {\n                app.commands.execute(lmsNotebooksLauncherCommand);\n            });\n        }\n        // initialize heap analytics store\n        const { setHeapAnalytics } = useHeapAnalytics.getState();\n        setHeapAnalytics(coreReady.analytics.heap);\n        // initialize cloud api url store\n        const { setApiUrl } = useCloudApiUrl.getState();\n        setApiUrl(coreReady.config.cloud.url);\n        let lmsWidget;\n        app.commands.addCommand(lmsNotebooksLauncherCommand, {\n            label: lmsNotebooksLauncherLabel,\n            iconClass: \"anaconda-data-catalog-icon\",\n            execute: async () => {\n                const tracker = new WidgetTracker({\n                    namespace: \"anaconda-learning-launcher\",\n                });\n                try {\n                    if (!lmsWidget || lmsWidget.isDisposed) {\n                        const content = new LMSWidget(app, coreReady.config, LMSConfigParams);\n                        lmsWidget = new MainAreaWidget({\n                            content,\n                        });\n                        lmsWidget.id = DOMUtils.createDomID();\n                        lmsWidget.title.label = lmsNotebooksLauncherWidgetTitleLabel;\n                        lmsWidget.title.closable = true;\n                    }\n                    if (!tracker.has(lmsWidget)) {\n                        // Track the state of the widget for later restoration\n                        tracker.add(lmsWidget);\n                    }\n                    if (!lmsWidget.isAttached) {\n                        // Attach the widget to the main work area if it's not there\n                        app.shell.add(lmsWidget, \"main\");\n                    }\n                    // Activate the widget\n                    app.shell.activateById(lmsWidget.id);\n                }\n                catch (err) {\n                    //@TODO: Implement Datadog alerts\n                    console.error(\"LMS - error\", err);\n                }\n            },\n        });\n        opts.launcher.add({\n            command: lmsNotebooksLauncherCommand,\n            category: lmsNotebooksLauncherCategory,\n        });\n    }\n}\n","import { create } from \"zustand\";\nexport const useCloudApiUrl = create((set) => ({\n    apiUrl: null,\n    setApiUrl: (url) => {\n        if (url) {\n            set({ apiUrl: url });\n        }\n    },\n}));\n","import { create } from \"zustand\";\nexport const useHeapAnalytics = create((set, get) => ({\n    isHeapAnalyticsEnabled: false,\n    setHeapAnalytics: (source) => {\n        if (source) {\n            set({ isHeapAnalyticsEnabled: source });\n        }\n    },\n    registerEvent: (category, data) => {\n        const { isHeapAnalyticsEnabled } = get();\n        if (isHeapAnalyticsEnabled) {\n            window.heap.track(category, data);\n        }\n    },\n}));\n","export var FetchStatus;\n(function (FetchStatus) {\n    FetchStatus[FetchStatus[\"IDLE\"] = 0] = \"IDLE\";\n    FetchStatus[FetchStatus[\"LOADING\"] = 1] = \"LOADING\";\n    FetchStatus[FetchStatus[\"SUCCESS\"] = 2] = \"SUCCESS\";\n    FetchStatus[FetchStatus[\"ERROR\"] = 3] = \"ERROR\";\n})(FetchStatus || (FetchStatus = {}));\nexport var View;\n(function (View) {\n    View[\"CATEGORIES\"] = \"categories\";\n    View[\"COURSES\"] = \"courses\";\n    View[\"NOTEBOOKS\"] = \"notebooks\";\n    View[\"NO_RESULTS\"] = \"no-results\";\n    View[\"ERROR\"] = \"error\";\n})(View || (View = {}));\nexport const LMSAppConstants = {\n    SEARCH_PLACEHOLDER: \"Search for a course\",\n    LMS_TITLE: \"Anaconda Learning\",\n    LMS_SUBTITLE: \"Get started building foundational skills in Python, data visualization, machine learning, and more.\",\n    SEARCH_DEBOUNCE_TIME: 400,\n    NOTEBOOK_SUBTITLE: \"Learn to read, write, and solve real-life problems with Python.\",\n};\n","import { fetchNotebookData } from \"../api\";\nimport { INotification } from \"jupyterlab_toastify\";\nexport async function setNewNotebookName(notebook, path, notebook_title, index = 0) {\n    const newFileName = `${notebook_title}${index ? \"_\" + index : \"\"}.ipynb`;\n    try {\n        await notebook.context.rename(newFileName);\n        await notebook.context.save();\n    }\n    catch (error) {\n        return setNewNotebookName(notebook, path, notebook_title, ++index);\n    }\n}\nexport async function ensureDirectoriesExist(path, app) {\n    const parts = path.split(\"/\");\n    let currentPath = \"/\";\n    for (const part of parts) {\n        // Check if the current part of the path exists\n        try {\n            await app.serviceManager.contents.get(`${currentPath}${part}`);\n        }\n        catch (error) {\n            // If not, create a new directory and rename it\n            const untitledDir = await app.serviceManager.contents.newUntitled({\n                path: currentPath,\n                type: \"directory\",\n            });\n            await app.serviceManager.contents.rename(untitledDir.path, `${currentPath}${part}`);\n        }\n        // Update currentPath for the next iteration\n        currentPath = `${currentPath}${part}/`;\n    }\n}\nexport async function openNotebook({ app, notebook_title, notebook_path, path = \"\", }) {\n    try {\n        await app.restored;\n        if (path) {\n            await ensureDirectoriesExist(path, app);\n        }\n        const notebook = await app.commands.execute(\"notebook:create-new\", { cwd: `/${path}` });\n        setNewNotebookName(notebook, path, notebook_title);\n        const notebookData = await fetchNotebookData(notebook_path, 1);\n        notebook.context.model.fromJSON({\n            ...notebookData,\n        });\n    }\n    catch (error) {\n        console.error(error);\n    }\n}\nexport async function copyToClipboard(text, successMessage = \"Copied to clipboard\", errorMessage = \"Failed to copy to clipboard\") {\n    try {\n        await navigator.clipboard.writeText(text);\n        INotification.success(successMessage, {\n            autoClose: 5000,\n        });\n    }\n    catch (error) {\n        INotification.error(errorMessage, {\n            autoClose: 5000,\n        });\n        console.error(errorMessage, error);\n    }\n}\n// Utility functions\nexport const findCategoryByTitle = (categories, title) => categories.find((category) => category.title === title);\nexport const findCourseByTitle = (category, title) => category?.courses.find((course) => course.title === title);\nexport const findNotebookByTitle = (course, title) => course?.notebooks.find((notebook) => notebook.title === title);\n","export * from \"./lmsWidget/LMSWidget\";\n","import { ReactWidget } from \"@jupyterlab/apputils\";\nimport React from \"react\";\nimport { LMSApp } from \"../../container/LMSApp\";\n/**\n * A Widget that wraps a DataCatalogs Component.\n */\nexport class LMSWidget extends ReactWidget {\n    app;\n    config;\n    urlParams;\n    /**\n     * Constructs a new DataCatalogsWidget.\n     */\n    constructor(app, config, urlParams) {\n        super();\n        this.app = app;\n        this.config = config;\n        this.urlParams = urlParams;\n    }\n    render() {\n        return (React.createElement(LMSApp, { app: this.app, config: this.config, urlParams: this.urlParams }));\n    }\n}\n","import { showDialog } from \"@jupyterlab/apputils\";\nimport React from \"react\";\nconst GETTING_STARTED_URL = \"https://static.anaconda.cloud/shared/cloud/getting-started/anaconda-cloud-getting-started.ipynb\";\nexport async function warnUserOfNotebookLoad(nb_url) {\n    if (nb_url === GETTING_STARTED_URL) {\n        return true; // Always allow loading the getting started notebook without warning\n    }\n    const url = new URL(nb_url);\n    const body = (React.createElement(React.Fragment, null,\n        React.createElement(\"p\", null,\n            \"This notebook is being loaded from\",\n            React.createElement(\"b\", null,\n                React.createElement(\"a\", { href: nb_url },\n                    \" \",\n                    url.hostname),\n                \".\",\n                \" \"),\n            \"Notebooks can run arbitrary code that can potentially be used for malicious purposes, including accessing or reading data and credentials from other sessions. Please review the notebook contents before running.\"),\n        React.createElement(\"br\", null),\n        React.createElement(\"p\", null, \"Would you like to continue loading this notebook?\")));\n    const okay = await showDialog({\n        title: \"Warning: Loading a notebook from a remote source\",\n        body,\n        host: document.body,\n    });\n    return okay.button.accept;\n}\n","import { showErrorMessage } from \"@jupyterlab/apputils\";\nimport { backend } from \"@anaconda/shared\";\nasync function fetchNotebook(url) {\n    const fetchedNotebook = await backend\n        .backendFetch(`aext_notebook_load_server/fetch_notebook?nb_url=${encodeURIComponent(url)}`)\n        .then((r) => backend.handleProxyResponse(r));\n    return fetchedNotebook;\n}\nexport async function loadNotebookFromURL(app, nb_url) {\n    let fetchedNotebookResponse;\n    try {\n        fetchedNotebookResponse = await fetchNotebook(nb_url);\n    }\n    catch (error) {\n        let message = \"The notebook could not be fetched\";\n        if (error instanceof Error) {\n            message = error.message;\n        }\n        console.error(error);\n        return showErrorMessage(\"Notebook fetch failed\", message);\n    }\n    const notebook = await app.commands.execute(\"notebook:create-new\");\n    await notebook.context.ready;\n    try {\n        notebook.context.model.fromJSON(fetchedNotebookResponse.content);\n    }\n    catch (error) {\n        console.error(error);\n        return showErrorMessage(\"Invalid contents\", \"The URL did not contain valid notebook JSON\");\n    }\n}\n","import NotebookLoadPlugin from \"./notebook_load_plugin\";\nimport { loadNotebookFromURL } from \"./components/utils/load_notebook\";\nexport { NotebookLoadPlugin, loadNotebookFromURL };\n","import { parseParams } from \"@anaconda/handle_cookie_lib\";\nimport { warnUserOfNotebookLoad } from \"./components/Dialog/warn_user_of_notebook_load\";\nimport { loadNotebookFromURL } from \"./components/utils/load_notebook\";\nexport default class NotebookLoadPlugin {\n    async activate(app, opts) {\n        const coreReady = await opts.corePlugin.ready();\n        if (!coreReady.featureFlag.getBool(\"monorepo-share-notebooks\", false)) {\n            return;\n        }\n        console.log(\"[Monorepo] Enabling the notebook-load plugin\");\n        const notebook_load_params = parseParams(\"notebook_params\");\n        if (notebook_load_params?.nb_url) {\n            if (await warnUserOfNotebookLoad(notebook_load_params.nb_url)) {\n                loadNotebookFromURL(app, notebook_load_params.nb_url);\n            }\n        }\n    }\n}\n","import { URLExt } from \"@jupyterlab/coreutils\";\nimport { ServerConnection } from \"@jupyterlab/services\";\n/**\n * Custom exception used to represent an API request failure.\n *\n * @param message API error message\n * @returns Exception with custom API error message\n */\nexport class APIRequestError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"APIRequestError\";\n    }\n}\n/**\n * Call the API extension.\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = \"\", init = {}, namespace = \"aext_panels_server\") {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, namespace, endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log(\"Not a JSON response body.\", response);\n        }\n    }\n    return data;\n}\n","import { APIRequestError, requestAPI } from \"../api\";\nexport async function fetchLogs(domain, logType) {\n    try {\n        const res = await requestAPI(`projects/${domain}/${logType}/`);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while retrieving ${domain}'s logs`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            console.error(\"`An error occurred while retrieving logs:\", e);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\n","import { APIRequestError, requestAPI } from \"../api\";\nimport { App, FeatureFlag, } from \"../types\";\nimport { useFeatureFlags } from \"../state/apps-zustand/feature-flags\";\nimport { backend } from \"@anaconda/shared\";\nexport async function fetchProject(notebook_file_path, project_id) {\n    const parameters = new URLSearchParams({\n        notebook_file_path,\n    });\n    if (project_id) {\n        parameters.append(\"project_id\", project_id);\n    }\n    try {\n        const res = await requestAPI(`project-info?${parameters}`, {\n            headers: getCloudStorageFFHeader(),\n        });\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(\"An error occurred while retrieving project information\");\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function saveApp(app) {\n    const { project_id, notebook_file_name: path, title, versioning, description, environment, } = app;\n    const init = {\n        method: \"POST\",\n        body: new URLSearchParams({\n            project_id,\n            path,\n            title,\n            description,\n            version: versioning.next_version,\n            environment,\n        }),\n        headers: getCloudStorageFFHeader(),\n    };\n    try {\n        const res = await requestAPI(\"projects\", init);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while saving ${path}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function fetchApps() {\n    try {\n        const res = (await requestAPI(\"deployments\", { headers: getCloudStorageFFHeader() })) || [];\n        if (res.content && Array.isArray(res.content.apps)) {\n            return {\n                ...res.content,\n                apps: res.content.apps.map((app) => {\n                    return new App(app);\n                }),\n            };\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        throw new APIRequestError(\"An error occurred while retrieving project information\");\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function fetchFeaturedApps() {\n    try {\n        const response = await backend.backendFetch(\"aext_panels_server/featured-apps\", {}, {});\n        if (response.remote_status_code != 200) {\n            throw new Error();\n        }\n        return response.remote_data;\n    }\n    catch (err) {\n        console.error(`Error retrieving featured apps`);\n    }\n}\nexport async function createApp(app_id, command) {\n    const init = {\n        method: \"POST\",\n        body: new URLSearchParams({ command }),\n        headers: getCloudStorageFFHeader(),\n    };\n    try {\n        const res = await requestAPI(`projects/${app_id}/publish/`, init);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while publishing ${app_id}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function deleteApp(projectId, domainName) {\n    try {\n        const res = await requestAPI(`projects/${projectId}/delete/?domain_name=${domainName}`, {\n            method: \"POST\",\n            headers: getCloudStorageFFHeader(),\n        });\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while deleting ${projectId}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\n// @TODO change the type unknown to something more specific\nexport async function downloadApp(project_id, project_version) {\n    try {\n        const parameters = new URLSearchParams({\n            project_id,\n            project_version,\n        });\n        const res = await requestAPI(`projects/download?${parameters}`, { headers: getCloudStorageFFHeader() });\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while downloading ${project_id}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function publishApp(domainName) {\n    const body = new URLSearchParams();\n    body.append(\"enabled\", \"true\");\n    const init = {\n        method: \"PATCH\",\n        body: body,\n        headers: getCloudStorageFFHeader(),\n    };\n    try {\n        const res = await requestAPI(`deployments?domain=${domainName}`, init);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while publishing ${domainName}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function unpublishApp(domainName) {\n    const body = new URLSearchParams();\n    body.append(\"enabled\", \"false\");\n    const init = {\n        method: \"PATCH\",\n        body: body,\n        headers: getCloudStorageFFHeader(),\n    };\n    try {\n        const res = await requestAPI(`deployments?domain=${domainName}`, init);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while unpublishing ${domainName}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function deleteAppVersion(projectId, versionId) {\n    const init = {\n        method: \"DELETE\",\n        headers: getCloudStorageFFHeader(),\n    };\n    try {\n        const res = await requestAPI(`projects/${projectId}/version/${versionId}`, init);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while deleting version ${versionId} of project ${projectId}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function downloadAppVersion(projectId, versionId) {\n    const init = {\n        method: \"GET\",\n        headers: getCloudStorageFFHeader(),\n    };\n    try {\n        const res = await requestAPI(`projects/download?project_id=${projectId}&project_version=${versionId}`, init);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while downloading version ${versionId} of project ${projectId}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function getAppVersion(projectId, versionId) {\n    const init = {\n        method: \"GET\",\n        headers: getCloudStorageFFHeader(),\n    };\n    try {\n        const res = await requestAPI(`projects/${projectId}/version/${versionId}`, init);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while fetching version ${versionId} of project ${projectId}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nexport async function restartApp(domainName) {\n    const init = {\n        method: \"PUT\",\n    };\n    try {\n        const res = await requestAPI(`deployments?domain=${domainName}`, init);\n        if (res.meta.error.status && !res.meta.error.message) {\n            throw new APIRequestError(`An error occurred while restarting ${domainName}`);\n        }\n        else if (res.meta.error.status && res.meta.error.message) {\n            throw new APIRequestError(res.meta.error.message);\n        }\n        return res.content;\n    }\n    catch (e) {\n        if (e instanceof APIRequestError) {\n            throw new APIRequestError(e.message);\n        }\n        throw new APIRequestError(\"Could not communicate with API endpoint\");\n    }\n}\nfunction getCloudStorageFFHeader() {\n    const store = useFeatureFlags.getState();\n    const isCloudStorageFFEnabled = store.evaluateFeatureFlag(FeatureFlag.CLOUD_STORAGE);\n    const headers = new Headers();\n    if (isCloudStorageFFEnabled) {\n        headers.append(\"X-MS-API-Version\", \"v2\");\n    }\n    else {\n        headers.append(\"X-MS-API-Version\", \"v1\");\n    }\n    return headers;\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { useAppStore } from \"../../state/apps-zustand/store\";\nimport { Theme, WidgetType } from \"../../types\";\nimport { useTheme } from \"../../hooks/theme\";\nimport { usePageVisibility } from \"react-page-visibility\";\nimport { getPollingInterval, usePolling } from \"../../hooks/polling\";\nimport { shallow } from \"zustand/shallow\";\nimport { useWidget } from \"../../hooks/OpenWidgetHook\";\nexport const AppCounter = () => {\n    const { appsDeployed, maxApps, apps } = useAppStore();\n    const { theme } = useTheme((state) => ({\n        theme: state.theme,\n    }), shallow);\n    const isVisible = usePageVisibility();\n    const wasVisible = useRef(true);\n    useEffect(() => {\n        const refreshApps = async () => {\n            // user navigated to another tab\n            if (!isVisible) {\n                wasVisible.current = false;\n                return;\n            }\n            // re-render that does not involve a tab change\n            if (wasVisible.current) {\n                return;\n            }\n            // user navigated back to this tab - refresh apps data\n            const { getApps } = useAppStore.getState();\n            await getApps();\n            wasVisible.current = true;\n        };\n        refreshApps();\n    }, [isVisible]);\n    useEffect(() => {\n        wasVisible.current = false;\n    }, [apps]);\n    const isVisibleAfterTabSwitch = !wasVisible.current && isVisible;\n    usePolling(isVisibleAfterTabSwitch ? getPollingInterval(apps) : -1);\n    const tooltipVariant = theme === Theme.DARK ? Theme.LIGHT : Theme.DARK;\n    const onTooltipClick = () => {\n        try {\n            const { openWidget } = useWidget();\n            openWidget(WidgetType.APP_MANAGEMENT);\n        }\n        catch (err) {\n            console.error(\"Panel - error\", err);\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"anaconda-rs-topbar-widget\" },\n            React.createElement(\"div\", { \"data-tooltip-id\": \"app-quota\", id: \"app-quota\", \"data-tooltip-variant\": tooltipVariant, onClick: onTooltipClick },\n                React.createElement(\"span\", { className: appsDeployed !== 0 && appsDeployed >= maxApps\n                        ? \"jp-tooltip__limit\"\n                        : \"\" },\n                    \"Apps: \",\n                    appsDeployed,\n                    \" / \",\n                    maxApps)),\n            React.createElement(Tooltip, { id: \"app-quota\", className: \"anaconda-rs-tooltip\", place: \"bottom\", positionStrategy: \"fixed\", style: { zIndex: 1 } },\n                React.createElement(\"p\", null, \"Number of Apps currently published\")))));\n};\nexport default AppCounter;\n","import { Dialog } from \"@jupyterlab/apputils\";\nimport React from \"react\";\nimport { CreateAppWidget } from \"../../widgets/CreateAppWidget\";\nimport { ViewAppWidget } from \"../../widgets/ViewAppWidget\";\nfunction createModalDialog({ options, }) {\n    const dialog = new Dialog(options);\n    dialog.launch().then(() => {\n        // Remove the host element from the DOM after the dialog is closed\n        if (options.host) {\n            options.host.remove();\n        }\n    });\n    return dialog;\n}\nfunction createHostElement(className) {\n    const host = document.createElement(\"div\");\n    host.classList.add(className);\n    document.body.appendChild(host);\n    return host;\n}\nexport function showNewAppModal(notebookFilePath, options = {}) {\n    const host = createHostElement(\"anaconda-apps-modal\");\n    const dialogOptions = {\n        ...options,\n        title: notebookFilePath,\n        body: React.createElement(CreateAppWidget, {\n            notebookFilePath,\n            closeCreateAppModal: () => {\n                dialog.reject();\n            },\n        }, null),\n        hasClose: true,\n        buttons: [],\n        host,\n    };\n    const dialog = createModalDialog({ options: dialogOptions });\n}\nexport function showViewAppModal(app, options = {}) {\n    const host = createHostElement(\"anaconda-apps-modal\");\n    const dialogOptions = {\n        ...options,\n        title: app.notebook_file_name.split(\"/\").pop() || \"\",\n        body: React.createElement(ViewAppWidget, {\n            app,\n            closeViewAppModal: () => {\n                dialog.reject();\n            },\n        }, null),\n        hasClose: true,\n        buttons: [],\n        host,\n    };\n    const dialog = createModalDialog({ options: dialogOptions });\n}\n","import React from \"react\";\nexport const Button = ({ id, isDisabled = false, onClick, variant = \"primary\", label, isLoading, labelLoading = \"Loading\", iconLoading, type = \"button\", icon, hasError, iconError, labelError = \"Retry\", iconPosition = \"left\", }) => {\n    const baseClassName = \"jp-PublishAppForm-button\";\n    const classMapping = {\n        primary: !hasError ? \"jp-primary-btn\" : \"jp-primary-btn__error\",\n        secondary: !hasError ? \"jp-secondary-btn\" : \"jp-secondary-btn__error\",\n        tertiary: \"jp-tertiary-btn\",\n        cancel: \"jp-cancel-btn\",\n    };\n    const displayState = isLoading ? \"loading\" : hasError ? \"error\" : \"normal\";\n    const Content = () => {\n        const renderIcon = (React.createElement(\"img\", { className: \"jp-PublishAppForm-button-icon\", src: `data:image/svg+xml;base64,${icon}`, alt: \"Button Icon\" }));\n        const renderLabel = React.createElement(\"div\", null, label);\n        const renderContent = iconPosition === \"left\" ? (React.createElement(React.Fragment, null,\n            icon && renderIcon,\n            renderLabel)) : (React.createElement(React.Fragment, null,\n            renderLabel,\n            icon && renderIcon));\n        switch (displayState) {\n            case \"loading\":\n                return (React.createElement(\"div\", null,\n                    iconLoading && (React.createElement(\"img\", { className: \"jp-PublishAppForm-button-icon\", src: `data:image/svg+xml;base64,${iconLoading}`, alt: \"Loading\" })),\n                    labelLoading || label));\n            case \"error\":\n                return (React.createElement(\"div\", null,\n                    iconError && (React.createElement(\"img\", { className: \"jp-PublishAppForm-button-icon\", src: `data:image/svg+xml;base64,${iconError}`, alt: \"Error\" })),\n                    labelError || label));\n            case \"normal\":\n            default:\n                return (React.createElement(\"div\", { style: { display: \"flex\", gap: \"5px\" } }, renderContent));\n        }\n    };\n    return (React.createElement(\"button\", { id: id, className: `${baseClassName} ${classMapping[variant]}`, \n        // We need to use onTouchStart instead of onClick because of a bug in\n        onClick: (evt) => {\n            evt.preventDefault();\n            onClick(evt);\n        }, disabled: isDisabled, type: type },\n        React.createElement(Content, null)));\n};\n","import React from \"react\";\nimport { Button } from \"./Button\";\nimport { SVGIcons } from \"../../icons\";\nimport { menuAppActions } from \"../Menu/MenuApps/MenuAppActions\";\nexport const CancelButton = ({ cancel }) => {\n    return (React.createElement(Button, { id: \"publish-cancel-button\", variant: \"cancel\", onClick: cancel, label: \"Cancel\" }));\n};\nexport const PublishButton = ({ handlePublish, hasError, isDisabled, labelLoading, isLoading, publishSuccess, canPublish, }) => {\n    if (canPublish) {\n        return (React.createElement(Button, { id: \"publish-publish-button\", hasError: hasError, onClick: handlePublish, isDisabled: isDisabled, isLoading: isLoading, iconLoading: SVGIcons.PUBLISHING, labelLoading: labelLoading, icon: publishSuccess ? SVGIcons.TICK_SVG : SVGIcons.DEPLOY_SVG, iconPosition: \"right\", label: publishSuccess ? \"Published\" : \"Publish\" }));\n    }\n    else {\n        return React.createElement(UpgradeButton, null);\n    }\n};\nexport const CloseButton = ({ cancel }) => {\n    return (React.createElement(Button, { id: \"publish-close-button\", variant: \"cancel\", onClick: cancel, label: \"Close\" }));\n};\nexport const RestartButton = ({ handleRestart, labelLoading, isLoading, }) => {\n    return (React.createElement(Button, { id: \"publish-restart-button\", variant: \"secondary\", onClick: handleRestart, label: \"Restart\", labelLoading: labelLoading, iconLoading: SVGIcons.PUBLISHING, isLoading: isLoading }));\n};\nexport const UnPublishButton = ({ handleUnPublish, labelLoading, isLoading, }) => {\n    return (React.createElement(Button, { id: \"publish-unpublish-button\", variant: \"tertiary\", onClick: handleUnPublish, label: \"Unpublish\", iconLoading: SVGIcons.PUBLISHING, labelLoading: labelLoading, isLoading: isLoading }));\n};\nexport const UpgradeButton = () => {\n    return (React.createElement(Button, { id: \"publish-upgrade-button\", onClick: menuAppActions.upgradeToPublish.execute, label: \"Upgrade to Publish\" }));\n};\n","import React from \"react\";\nexport const ConfirmationDialog = (props) => {\n    const { description } = props;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"jp-Alert-content jp-confirmation-alert\" },\n            React.createElement(\"div\", { className: \"jp-Alert-message\" }, description))));\n};\n","import React from \"react\";\nimport { ConfirmationDialog } from \"./ConfirmationDialog\";\nimport { Dialog, showDialog } from \"@jupyterlab/apputils\";\n/**\n * This function will open a new dialog\n *\n * @param str\n * @returns string\n */\nexport async function openConfirmationDialog(obj) {\n    const result = await showDialog({\n        title: obj.title\n            ? obj.title\n            : React.createElement(\"img\", {\n                src: \"data:image/svg+xml;base64,\" + obj?.icon,\n                style: { display: \"block\", margin: \"0 auto\" },\n            }),\n        body: React.createElement(ConfirmationDialog, {\n            description: obj?.description,\n        }),\n        buttons: [\n            Dialog.cancelButton({\n                label: obj?.cancelBtnText,\n                className: obj.cancelBtnClass,\n            }),\n            Dialog.okButton({\n                label: obj?.okBtnText,\n                className: obj.okBtnClass,\n                displayType: obj.okBtnType ? obj.okBtnType : \"default\",\n            }),\n        ],\n    }).then((result) => {\n        return result.button;\n    });\n    return result;\n}\n","import React from \"react\";\nexport const Deployment = ({ url }) => {\n    return (React.createElement(\"iframe\", { src: url, \"allow-scripts\": \"true\", width: \"100%\", height: \"100%\" }));\n};\n","import React from \"react\";\nimport { useHelpMenu } from \"../Menu\";\nimport { SVGIcons } from \"../../icons\";\nimport { Tooltip } from \"react-tooltip\";\nexport const HelpButton = () => {\n    const { openMenu, isVisible } = useHelpMenu();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Tooltip, { \"data-tooltip-className\": \"jp-tooltip\", \"data-tooltip-id\": \"helper-button-tooltip\", \"data-tooltip-place\": \"right\", \"data-tooltip-effect\": \"solid\", \"data-tooltip-delayUpdate\": 100 },\n            React.createElement(\"p\", null, \" Resources \")),\n        React.createElement(\"div\", { className: `jp-help-button ${isVisible ? \"jp-help-button-active\" : \"\"}`, onClick: openMenu },\n            React.createElement(\"img\", { height: \"20px\", \"data-tip\": true, \"data-for\": \"helper-button-tooltip\", src: \"data:image/svg+xml;base64,\" + SVGIcons.HELP, alt: \"Help Icon\" }))));\n};\n","import React from \"react\";\nimport { STATUS_APP } from \"../../types\";\nimport { AppTile } from \"../Tile/AppTile\";\n// Function that returns the priority of the status\nconst STATUS_PRIORITY = {\n    [STATUS_APP.PUBLISHED]: 1,\n    [STATUS_APP.PUBLISHING]: 2,\n    [STATUS_APP.FAILED]: 3,\n    [STATUS_APP.INACTIVE]: 4,\n};\n// Comparison function for sorting\nconst compareApps = (a, b) => {\n    const statusA = STATUS_PRIORITY[a.status];\n    const statusB = STATUS_PRIORITY[b.status];\n    // If statuses are the same, compare dates\n    if (statusA === statusB) {\n        const dateA = a.last_updated_at ? new Date(a.last_updated_at).getTime() : 0;\n        const dateB = b.last_updated_at ? new Date(b.last_updated_at).getTime() : 0;\n        return dateB - dateA; // latest comes first\n    }\n    // Otherwise, compare statuses\n    return statusA - statusB;\n};\nexport const AppList = ({ title, apps }) => {\n    const sortedApps = apps.sort(compareApps);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"h2\", null, title),\n        React.createElement(\"p\", { className: \"anaconda-app-list-desc\" }, \"Publish an app to share it with the world!\"),\n        React.createElement(\"div\", { className: \"anaconda-app-list\" }, sortedApps.map((app) => (React.createElement(\"div\", { key: app.title },\n            React.createElement(AppTile, { app: app })))))));\n};\n","import React from \"react\";\nimport { FeaturedAppTile } from \"../Tile/FeaturedAppTile\";\nexport const FeaturedAppList = ({ featuredApps, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"h2\", null, \"Featured Examples\"),\n        React.createElement(\"div\", { className: \"anaconda-app-list\" }, featuredApps.map((app) => (React.createElement(\"div\", { key: app.title },\n            React.createElement(FeaturedAppTile, { featuredApp: app })))))));\n};\n","import { CourseTile } from \"@anaconda/lms_notebooks_lib\";\nimport React, { useState } from \"react\";\nimport { CourseTitle } from \"../../types\";\nimport { DOMUtils, MainAreaWidget } from \"@jupyterlab/apputils\";\nimport { ResourceWidget } from \"../../widgets/ResourceWidget\";\nimport { useAppShellStateStore } from \"../../state/app-shell-zustand/store\";\nimport { findCategorySelected } from \"../../utils\";\nexport const ResourcesList = ({ courses, categories, }) => {\n    const [exploreAll, setExploreAll] = useState(false);\n    const onClickResourceViewType = () => {\n        setExploreAll(!exploreAll);\n    };\n    const getSelectedCategoryTitle = (course) => {\n        return findCategorySelected(course, categories)?.title || \"\";\n    };\n    const handleCourseClick = (course, categories) => {\n        let anacondaLearningWidget;\n        const selectedCategory = findCategorySelected(course, categories);\n        if (selectedCategory) {\n            const content = new ResourceWidget(course, selectedCategory);\n            anacondaLearningWidget = new MainAreaWidget({\n                content,\n            });\n            anacondaLearningWidget.id = DOMUtils.createDomID();\n            anacondaLearningWidget.title.label = \"Anaconda Learning\";\n            anacondaLearningWidget.title.closable = true;\n            const { appShell } = useAppShellStateStore.getState();\n            if (!anacondaLearningWidget.isAttached) {\n                appShell?.add(anacondaLearningWidget, \"main\");\n            }\n            // Activate the widget\n            appShell?.activateById(anacondaLearningWidget.id);\n        }\n    };\n    const defaultCourses = exploreAll\n        ? courses\n        : courses.filter((course) => Object.values(CourseTitle).includes(course.title));\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"anaconda-app-resources-header\" },\n            React.createElement(\"h2\", { style: { flexGrow: 1 } }, \"Resources\"),\n            React.createElement(\"div\", { className: \"anaconda-app-resources-collapsible-div\" },\n                !exploreAll && (React.createElement(\"div\", { className: \"anaconda-app-resources-collapsible\", onClick: onClickResourceViewType },\n                    \"Explore Anaconda Learning\",\n                    React.createElement(\"span\", { className: \"fas fa-chevron-right ml-2\" }))),\n                exploreAll && (React.createElement(\"div\", { className: \"anaconda-app-resources-collapsible\", onClick: onClickResourceViewType },\n                    React.createElement(\"span\", { className: \"fas fa-chevron-left ml-2\" }),\n                    \"Collapse\")))),\n        React.createElement(\"div\", { className: \"anaconda-app-list\" }, defaultCourses.map((course, index) => (React.createElement(\"div\", { \"data-testid\": `course-tile-${course.title}`, key: course.title, onClick: () => handleCourseClick(course, categories) },\n            React.createElement(CourseTile, { courseTitle: course.title, courseType: course.course_type, courseIcon: course.course_icon, categoryTitle: getSelectedCategoryTitle(course), courseDescription: course.description, notebooksCount: course.notebooks.length })))))));\n};\n","import { closeIcon, downloadIcon } from \"@jupyterlab/ui-components/lib/icon\";\nimport { Notification } from \"@jupyterlab/apputils\";\nimport { ViewIcon, ViewJupyterLabIcon, UnPublishIcon, RestartIcon, CopyLinkIcon, ViewLogsIcon, publishGrayIcon, SVGIcons, infoIcon, } from \"../../../icons\";\nimport { useAppStore } from \"../../../state/apps-zustand/store\";\nimport { App, STATUS_APP, WidgetType } from \"../../../types\";\nimport { openConfirmationDialog } from \"../../ConfirmationDialog\";\nimport { downloadApp } from \"../../../api/project\";\nimport { PANEL_CMD } from \"../../../views/createAppView\";\nimport { useAppShellStateStore } from \"../../../state/app-shell-zustand/store\";\nimport { useWidget } from \"../../../hooks/OpenWidgetHook\";\nimport { PROD_NUCLEUS_URL } from \"../../../constants\";\nimport { showViewAppModal } from \"../../AppModal/AppModal\";\nimport { openInNewTab, downloadFile, base64ToBlob } from \"../../../utils/index\";\nimport { showVersionsModal } from \"../../VersionsModal/VersionsModal\";\nimport { useHeapAnalytics } from \"../../../state/apps-zustand/heap\";\n/**\n * This is a global config object used for all the menus we have, since a specific option is the same when appear in some menu,\n * we have created this method to make easier to build the menus.\n *\n * If we need to override some specific option by a specific status we can do this on the\n * handlers file\n */\nexport const menuAppActions = {\n    viewInNewTab: {\n        label: \"View in New Browser Tab\",\n        icon: ViewIcon,\n        command: \"view:view-in-new-tab\",\n        execute: (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - View in New Browser Tab\");\n            openInNewTab(app?.domainUrl);\n        },\n    },\n    viewInJupyterLab: {\n        label: \"View in JupyterLab\",\n        icon: ViewJupyterLabIcon,\n        command: \"view:view-in-jupyter-lab\",\n        execute: (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - View in JupyterLab\");\n            const { openWidget } = useWidget();\n            // The logic to open in a viewInJupyterLab is inside the widgets/StatusPageWidget.tsx\n            if (app) {\n                openWidget(WidgetType.DEPLOYMENT, app);\n            }\n        },\n    },\n    publish: {\n        label: \"Publish\",\n        icon: publishGrayIcon,\n        command: \"publish:publish\",\n        execute: async (app) => {\n            if (app === undefined) {\n                return;\n            }\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Publish app\");\n            const { closeAllWidgetsByApp } = useAppShellStateStore.getState();\n            const { openWidget } = useWidget();\n            const { publishApp, createApp } = useAppStore.getState();\n            Notification.success(`Publishing ${app.title}`, {\n                autoClose: 5000,\n            });\n            // Invoke createApp if domain not found, otherwise publishApp\n            const domainApp = app.domainName\n                ? await publishApp(app.domainName)\n                : await createApp(app.project_id, PANEL_CMD);\n            if (domainApp === null) {\n                closeAllWidgetsByApp(app);\n                openWidget(WidgetType.APP_MANAGEMENT, app);\n                return;\n            }\n            closeAllWidgetsByApp(app);\n            openWidget(WidgetType.APP_MANAGEMENT, app);\n        },\n    },\n    unpublish: {\n        label: \"Unpublish\",\n        icon: UnPublishIcon,\n        command: \"unpublish:unpublish\",\n        execute: async (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Unpublish app\");\n            const dialog = {\n                icon: SVGIcons.WARN_SVG,\n                description: `Are you sure you want to unpublish the app \"${app?.title}\"? Your app will become inactive.`,\n                okBtnText: \"Unpublish\",\n                okBtnClass: \"jp-delete-btn\",\n                cancelBtnText: \"Cancel\",\n                cancelBtnClass: \"jp-cancel-btn\",\n                okBtnType: \"warn\",\n            };\n            const dialogResult = await openConfirmationDialog(dialog);\n            if (dialogResult.accept && app) {\n                const { unpublishApp } = useAppStore.getState();\n                Notification.success(`Unpublishing ${app.title}`, {\n                    autoClose: 5000,\n                });\n                const hasSuccess = await unpublishApp(app.domainName);\n                if (hasSuccess) {\n                    Notification.success(`${app.title} unpublished`, {\n                        autoClose: 5000,\n                    });\n                }\n                else {\n                    Notification.error(\"An error occurred while unpublishing the app\", {\n                        autoClose: 5000,\n                    });\n                }\n            }\n        },\n    },\n    restart: {\n        label: \"Restart\",\n        icon: RestartIcon,\n        command: \"restart:restart\",\n        execute: async (app) => {\n            if (app === undefined) {\n                return;\n            }\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Restart app\");\n            const { restartApp } = useAppStore.getState();\n            const { closeAllWidgetsByApp } = useAppShellStateStore.getState();\n            const { openWidget } = useWidget();\n            Notification.success(`Restarting ${app.title}`, {\n                autoClose: 5000,\n            });\n            const domainApp = await restartApp(app?.domainName);\n            if (domainApp === null) {\n                closeAllWidgetsByApp(app);\n                openWidget(WidgetType.APP_MANAGEMENT, app);\n                return;\n            }\n            const appDomains = [domainApp];\n            const status = STATUS_APP.PUBLISHING;\n            const appWithDomain = new App({ ...app, status, domains: appDomains });\n            closeAllWidgetsByApp(app);\n            openWidget(WidgetType.APP_MANAGEMENT, appWithDomain);\n        },\n    },\n    copyAppLink: {\n        label: \"Copy App Link\",\n        icon: CopyLinkIcon,\n        command: \"copy:copy-app-link\",\n        execute: async (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Copy App Link\");\n            if (app && app.domainUrl) {\n                try {\n                    await navigator.clipboard.writeText(app.domainUrl);\n                    Notification.success(\"Link copied to clipboard\", {\n                        autoClose: 5000,\n                    });\n                }\n                catch (err) {\n                    Notification.error(\"An error occurred while copying the link\", {\n                        autoClose: 5000,\n                    });\n                }\n            }\n            else {\n                console.warn(\"App or app domainUrl is not defined\");\n            }\n        },\n    },\n    viewServerLogs: {\n        label: \"View Server Logs\",\n        icon: ViewLogsIcon,\n        command: \"view-server-logs:view-server-logs\",\n        execute: (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - View Server Logs\");\n            if (app === undefined) {\n                return;\n            }\n            const { openWidget } = useWidget();\n            openWidget(WidgetType.TERMINAL, app, {\n                label: `Server Logs: ${app.title}`,\n            });\n        },\n    },\n    viewErrorLogs: {\n        label: \"View Error Logs\",\n        icon: ViewLogsIcon,\n        command: \"view-error-logs:view-error-logs\",\n        execute: (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - View Error Logs\");\n            if (app === undefined) {\n                return;\n            }\n            const { openWidget } = useWidget();\n            openWidget(WidgetType.TERMINAL, app, {\n                label: `Error Logs: ${app.title}`,\n            });\n        },\n    },\n    viewConfiguration: {\n        label: \"View Configuration\",\n        icon: infoIcon,\n        command: \"view-config:view-config\",\n        execute: (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - View Configuration\");\n            if (app) {\n                showViewAppModal(app);\n            }\n        },\n    },\n    download: {\n        label: \"Download\",\n        icon: downloadIcon,\n        command: \"download:download\",\n        execute: async (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Download\");\n            Notification.success(\"Your download will begin shortly.\", {\n                autoClose: 5000,\n            });\n            // Define the file name\n            const fileName = `${app.title}-${app.versioning.current_version}.zip`;\n            // Define the mime type\n            const mimeType = \"application/zip\";\n            // Get the base64 string of the app\n            const appDownloaded = await downloadApp(app.project_id, app.versioning.current_version);\n            // Now we need to convert the appDownloaded string from base64 to a file and download it\n            const blob = base64ToBlob(appDownloaded.archive, mimeType);\n            // download the Blob file\n            downloadFile(blob, fileName);\n        },\n    },\n    delete: {\n        label: \"Delete\",\n        icon: closeIcon,\n        command: \"delete:delete\",\n        execute: (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Delete\");\n            const dialog = {\n                icon: SVGIcons.WARN_SVG,\n                description: `Are you sure you want to delete the app \"${app?.title}\"? The associated URL will no longer be available.`,\n                okBtnText: \"Delete\",\n                okBtnClass: \"jp-delete-btn\",\n                cancelBtnText: \"Cancel\",\n                cancelBtnClass: \"jp-cancel-btn\",\n                okBtnType: \"warn\",\n            };\n            openConfirmationDialog(dialog).then(async (dialogResult) => {\n                if (dialogResult.accept && app) {\n                    const { deleteApp } = useAppStore.getState();\n                    const { closeAllWidgetsByApp } = useAppShellStateStore.getState();\n                    Notification.success(`Deleting ${app.title}`, {\n                        autoClose: 5000,\n                    });\n                    const hasSuccess = await deleteApp(app.project_id, app.domainName);\n                    closeAllWidgetsByApp(app);\n                    if (hasSuccess) {\n                        Notification.success(`${app.title} deleted`, {\n                            autoClose: 5000,\n                        });\n                    }\n                    else {\n                        Notification.error(\"An error occurred while deleting the app\", {\n                            autoClose: 5000,\n                        });\n                    }\n                }\n            });\n        },\n    },\n    upgradeToPublish: {\n        label: \"Upgrade to Publish\",\n        command: \"upgrade-to-publish:upgrade-to-publish\",\n        icon: publishGrayIcon,\n        // We don't need the app parameter there, if we need in the future check the\n        // PublishAppFormView.tsx where this command is used\n        execute: () => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Upgrade to Publish\");\n            window.open(`${PROD_NUCLEUS_URL}/pricing`, \"_blank\");\n        },\n    },\n    lastOptionMessage: {\n        label: \"Shift+Right Click for Browser Menu\",\n        command: \"last-option-message:last-option-message\",\n        disabled: true,\n        // Will not have implementation because will be always disabled\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        execute: (app) => { },\n    },\n    viewVersions: {\n        label: \"View Versions\",\n        command: \"view-versions:view-versions\",\n        execute: (app) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - View Versions\");\n            if (app) {\n                showVersionsModal(app);\n            }\n        },\n    },\n};\n","import { MAX_PRO_PLUS_SUBSCRIPTIONS } from \"../../../constants\";\nimport { useAppStore } from \"../../../state/apps-zustand/store\";\nimport { FeatureFlag } from \"../../../types\";\nimport { menuAppActions } from \"./MenuAppActions\";\nimport { useFeatureFlags } from \"../../../state/apps-zustand/feature-flags\";\n/**\n *\n * handlers file is used for the following reasons:\n *\n * - If we need to sort the order of the actions\n * - If we need to add a new type of menu by status we just need to create a new buildFunction\n * - If we need to override the global config.ts to have a specific opiton by status\n */\nexport const buildFailedMenu = (menuBuilder, app) => {\n    const store = useFeatureFlags.getState();\n    const isCloudStorageFFEnabled = store.evaluateFeatureFlag(FeatureFlag.CLOUD_STORAGE);\n    menuBuilder\n        .addItem({ ...menuAppActions.viewInNewTab, disabled: true }, app)\n        .addItem({ ...menuAppActions.viewInJupyterLab, disabled: true }, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.restart, app)\n        .addItem({ ...menuAppActions.unpublish, disabled: true }, app)\n        .addLineSeparator()\n        .addItem({ ...menuAppActions.copyAppLink, disabled: true }, app)\n        .addItem({ ...menuAppActions.viewErrorLogs }, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.viewConfiguration, app);\n    if (isCloudStorageFFEnabled) {\n        menuBuilder.addItem(menuAppActions.viewVersions, app);\n    }\n    menuBuilder\n        .addLineSeparator()\n        .addItem(menuAppActions.download, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.delete, app);\n    return menuBuilder.addItem(menuAppActions.lastOptionMessage, app);\n};\nexport const buildPublishedMenu = (menuBuilder, app) => {\n    const store = useFeatureFlags.getState();\n    const isCloudStorageFFEnabled = store.evaluateFeatureFlag(FeatureFlag.CLOUD_STORAGE);\n    menuBuilder\n        .addItem(menuAppActions.viewInNewTab, app)\n        .addItem(menuAppActions.viewInJupyterLab, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.restart, app)\n        .addItem(menuAppActions.unpublish, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.copyAppLink, app)\n        .addItem(menuAppActions.viewServerLogs, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.viewConfiguration, app);\n    if (isCloudStorageFFEnabled) {\n        menuBuilder.addItem(menuAppActions.viewVersions, app);\n    }\n    menuBuilder\n        .addLineSeparator()\n        .addItem(menuAppActions.download, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.delete, app);\n    return menuBuilder.addItem(menuAppActions.lastOptionMessage, app);\n};\nexport const buildInactiveMenu = (menuBuilder, app) => {\n    const { canPublish, appsDeployed } = useAppStore.getState();\n    // Validate if the user can publish an app based on their subscription\n    const publishOption = canPublish\n        ? menuAppActions.publish\n        : menuAppActions.upgradeToPublish;\n    // Should not show the publish option if the user has reached the limit of apps deployed for PRO+ users\n    if (appsDeployed < MAX_PRO_PLUS_SUBSCRIPTIONS || canPublish) {\n        menuBuilder.addItem(publishOption, app);\n    }\n    const store = useFeatureFlags.getState();\n    const isCloudStorageFFEnabled = store.evaluateFeatureFlag(FeatureFlag.CLOUD_STORAGE);\n    if (isCloudStorageFFEnabled) {\n        menuBuilder.addItem(menuAppActions.viewVersions, app);\n    }\n    menuBuilder\n        .addItem(menuAppActions.download, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.delete, app);\n    return menuBuilder.addItem(menuAppActions.lastOptionMessage, app);\n};\nexport const buildPublishingMenu = (menuBuilder, app) => {\n    const store = useFeatureFlags.getState();\n    const isCloudStorageFFEnabled = store.evaluateFeatureFlag(FeatureFlag.CLOUD_STORAGE);\n    menuBuilder\n        .addItem({ ...menuAppActions.viewInNewTab, disabled: true }, app)\n        .addItem({ ...menuAppActions.viewInJupyterLab, disabled: true }, app)\n        .addLineSeparator()\n        .addItem({ ...menuAppActions.restart, disabled: true }, app)\n        .addItem(menuAppActions.unpublish, app)\n        .addLineSeparator()\n        .addItem({ ...menuAppActions.copyAppLink, disabled: true }, app)\n        .addItem({ ...menuAppActions.viewErrorLogs }, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.viewConfiguration, app);\n    if (isCloudStorageFFEnabled) {\n        menuBuilder.addItem(menuAppActions.viewVersions, app);\n    }\n    menuBuilder\n        .addLineSeparator()\n        .addItem(menuAppActions.download, app)\n        .addLineSeparator()\n        .addItem(menuAppActions.delete, app);\n    return menuBuilder.addItem(menuAppActions.lastOptionMessage, app);\n};\n","import { CommandRegistry } from \"@lumino/commands\";\nimport { RankedMenu } from \"@jupyterlab/ui-components\";\n/**\n * MenuBuilder class provides methods for building and configuring menus.\n */\nexport class MenuBuilder {\n    commandRegistry;\n    menuItems;\n    constructor() {\n        this.commandRegistry = new CommandRegistry();\n        this.menuItems = [[]];\n    }\n    /**\n     * Adds a menu item to the menu.\n     * @param {MenuItem} item - The menu item to add.\n     * @returns {MenuBuilder} The current MenuBuilder instance for chaining.\n     *\n     * NOTE: We have a disabled property because by default is enabled, so for most of cases we don't need to pass the disabled property\n     */\n    addItem(item, payload) {\n        this.commandRegistry.addCommand(item.command, {\n            label: item.label,\n            icon: item.icon,\n            iconClass: \"jp-app-menu-option-icon\",\n            className: \"jp-app-menu-option\",\n            execute: () => item.execute(payload),\n            isVisible: () => !item.hide,\n            isEnabled: () => !item.disabled,\n        });\n        const currentIndex = this.menuItems.length - 1;\n        this.menuItems[currentIndex] = [...this.menuItems[currentIndex], item];\n        return this;\n    }\n    // This was added to facilitate tests, because we need to access the commandRegistry\n    // since we cannot test the click event\n    getCommandRegistry() {\n        return this.commandRegistry;\n    }\n    /**\n     * Will add a line separation using groups concept\n     */\n    addLineSeparator() {\n        // Add a new array position to the menuItems array\n        this.menuItems = [...this.menuItems, []];\n        return this;\n    }\n    /**\n     * Builds the menu with the configured menu items.\n     * @returns {RankedMenu} The built menu.\n     */\n    build() {\n        const menu = new RankedMenu({\n            commands: this.commandRegistry,\n            includeSeparators: true,\n        });\n        menu.node.classList.add(\"jp-app-menu\");\n        this.menuItems.forEach((group) => {\n            menu.addGroup(group);\n        });\n        return menu;\n    }\n    /**\n     * Opens the menu at the specified event position.\n     * Should be called after creating the menu (the last method called)\n     * @param {MouseEvent} evt - The event containing the position where the menu should open.\n     */\n    open(event, setIsVisible) {\n        const menu = this.build();\n        menu.aboutToClose.connect(() => {\n            setIsVisible(false);\n        });\n        menu.open(event.clientX, event.clientY);\n    }\n}\n","import { openInNewTab } from \"../../../utils\";\nimport { buildYourFirstAppUrl, myLearningUrl, panelDocumentationUrl, } from \"./MenuHelpUrls\";\n/**\n * This is a global config object used for all the menus we have, since a specific option is the same when appear in some menu,\n * we have created this method to make easier to build the menus.\n *\n * If we need to override some specific option by a specific status we can do this on the\n * handlers file\n */\nexport const menuHelpActions = {\n    myLearning: {\n        label: \"My Learning\",\n        command: \"help:my-learning\",\n        execute: () => {\n            openInNewTab(myLearningUrl);\n        },\n    },\n    buildYourFirstApp: {\n        label: \"Building Your First App\",\n        command: \"help:build-your-first-app\",\n        execute: () => {\n            openInNewTab(buildYourFirstAppUrl);\n        },\n    },\n    panelDocumentation: {\n        label: \"Panel Documentation\",\n        command: \"help:panel-documentation\",\n        execute: () => {\n            openInNewTab(panelDocumentationUrl);\n        },\n    },\n};\n","import { menuHelpActions } from \"./MenuHelpActions\";\n/**\n *\n * handlers file is used for the following reasons:\n *\n * - If we need to sort the order of the actions\n * - If we need to add a new type of menu by status we just need to create a new buildFunction\n * - If we need to override the global config.ts to have a specific opiton by status\n */\nexport const buildHelpMenu = (menuBuilder) => {\n    return menuBuilder\n        .addItem(menuHelpActions.myLearning, null)\n        .addItem({ ...menuHelpActions.buildYourFirstApp }, null)\n        .addItem(menuHelpActions.panelDocumentation, null);\n};\n","export const panelDocumentationUrl = \"https://panel.holoviz.org\";\nexport const myLearningUrl = \"https://learning.anaconda.cloud\";\nexport const buildYourFirstAppUrl = \"https://panel.holoviz.org/getting_started/build_app.html\";\n","import { useHeapAnalytics } from \"../../../state/apps-zustand/heap\";\n/**\n * This is a global config object used for all the menus we have, since a specific option is the same when appear in some menu,\n * we have created this method to make easier to build the menus.\n *\n * If we need to override some specific option by a specific status we can do this on the\n * handlers file\n */\nexport const menuVersionActions = {\n    deleteVersion: {\n        label: \"Delete Version\",\n        command: \"version:delete\",\n        execute: async (menuVersionPayload) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Delete Version\");\n            if (menuVersionPayload) {\n                menuVersionPayload.handleDelete(menuVersionPayload.data);\n            }\n        },\n    },\n    downloadApp: {\n        label: \"Download App\",\n        command: \"version:download\",\n        execute: async (menuVersionPayload) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Download App\");\n            menuVersionPayload.handleDownload(menuVersionPayload.data);\n        },\n    },\n    duplicateNotebook: {\n        label: \"Duplicate Notebook\",\n        command: \"version:duplicateNotebook\",\n        execute: async (menuVersionPayload) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Duplicate Notebook\");\n            menuVersionPayload.handleDuplicate(menuVersionPayload.data);\n        },\n    },\n    copyUrl: {\n        label: \"Copy URL\",\n        command: \"version:copyUrl\",\n        execute: async (menuVersionPayload) => {\n            const { registerEvent } = useHeapAnalytics.getState();\n            registerEvent(\"nb.anaconda.cloud - Panel - Click - Copy URL\");\n            menuVersionPayload.handleCopyUrl();\n        },\n    },\n};\n","import { menuVersionActions } from \"./MenuVersionActions\";\n/**\n *\n * handlers file is used for the following reasons:\n *\n * - If we need to sort the order of the actions\n * - If we need to add a new type of menu by status we just need to create a new buildFunction\n * - If we need to override the global config.ts to have a specific opiton by status\n */\nexport const buildPublishedVersionMenu = (menuBuilder, menuVersionPayload) => {\n    return menuBuilder\n        .addItem({ ...menuVersionActions.duplicateNotebook }, menuVersionPayload)\n        .addItem({ ...menuVersionActions.copyUrl }, menuVersionPayload)\n        .addItem({ ...menuVersionActions.downloadApp }, menuVersionPayload)\n        .addItem({ ...menuVersionActions.deleteVersion }, menuVersionPayload);\n};\nexport const buildUnPublishedVersionMenu = (menuBuilder, menuVersionPayload) => {\n    return menuBuilder\n        .addItem({ ...menuVersionActions.duplicateNotebook }, menuVersionPayload)\n        .addItem({ ...menuVersionActions.downloadApp }, menuVersionPayload)\n        .addItem({ ...menuVersionActions.deleteVersion }, menuVersionPayload);\n};\n","import { useCallback, useState } from \"react\";\nimport { STATUS_APP } from \"../../types\";\nimport { buildFailedMenu, buildInactiveMenu, buildPublishedMenu, buildPublishingMenu, } from \"./MenuApps/MenuAppHandler\";\nimport { MenuBuilder } from \"./MenuBuilder\";\nimport { buildHelpMenu } from \"./MenuHelp/MenuHelpHandler\";\nimport { buildPublishedVersionMenu, buildUnPublishedVersionMenu, } from \"./MenuVersions/MenuVersionHandler\";\n/**\n * useMenu hook creates and configures a menu based on the provided status.\n * @param {StatusType} status - The status used to determine the menu items.\n * @returns {{ openMenu: (evt: MouseEvent) => void, isVisible: boolean }} The object containing the openMenu function.\n */\nexport const useAppMenu = (app) => {\n    let menuBuilder = new MenuBuilder();\n    const [isVisible, setIsVisible] = useState(false);\n    // Configure the menu based on the status\n    switch (app.status) {\n        case STATUS_APP.PUBLISHED:\n            menuBuilder = buildPublishedMenu(menuBuilder, app);\n            break;\n        case STATUS_APP.FAILED:\n            menuBuilder = buildFailedMenu(menuBuilder, app);\n            break;\n        case STATUS_APP.PUBLISHING:\n            menuBuilder = buildPublishingMenu(menuBuilder, app);\n            break;\n        case STATUS_APP.INACTIVE:\n            menuBuilder = buildInactiveMenu(menuBuilder, app);\n            break;\n    }\n    const openMenu = useCallback((evt) => {\n        setIsVisible(true);\n        return menuBuilder.open(evt, setIsVisible);\n    }, [menuBuilder]);\n    return {\n        isVisible,\n        openMenu,\n        // Since the click of the JL Luminous / JL doesn't' work inside the tests we need to export the menuBuilder\n        // and call directly in the tests\n        menuBuilder,\n    };\n};\n/**\n *  useHelpMenu hook creates and configures a help menu.\n * @returns {{ openMenu: (evt: MouseEvent) => void, isVisible: boolean }} The object containing the openMenu function.\n */\nexport const useHelpMenu = () => {\n    let menuBuilder = new MenuBuilder();\n    const [isVisible, setIsVisible] = useState(false);\n    menuBuilder = buildHelpMenu(menuBuilder);\n    const openMenu = useCallback((evt) => {\n        setIsVisible(true);\n        return menuBuilder.open(evt, setIsVisible);\n    }, [menuBuilder]);\n    return {\n        isVisible,\n        openMenu,\n        menuBuilder,\n    };\n};\n/**\n *  useVersionActionMenu hook creates and configures a version action menu.\n * @returns {{ openMenu: (evt: MouseEvent) => void, isVisible: boolean }} The object containing the openMenu function.\n */\nexport const useVersionMenu = (menuVersionPayload) => {\n    let menuBuilder = new MenuBuilder();\n    const [isVisible, setIsVisible] = useState(false);\n    menuBuilder = menuVersionPayload.data.isLatest\n        ? buildPublishedVersionMenu(menuBuilder, menuVersionPayload)\n        : buildUnPublishedVersionMenu(menuBuilder, menuVersionPayload);\n    const openMenu = useCallback((evt) => {\n        setIsVisible(true);\n        return menuBuilder.open(evt, setIsVisible);\n    }, [menuBuilder]);\n    return {\n        isVisible,\n        openMenu,\n        menuBuilder,\n    };\n};\n","import React, { useState } from \"react\";\nconst TabButtons = ({ tabs, changeTab, activeTab, }) => {\n    return (React.createElement(\"div\", { className: \"anaconda-panel-tabs\" }, tabs.map((tab) => (React.createElement(\"div\", { className: tab === activeTab\n            ? \"anaconda-panel-tab-active\"\n            : \"anaconda-panel-tab-inactive\", onClick: () => changeTab(tab), key: tab }, tab)))));\n};\nexport const Tab = (props) => {\n    return React.createElement(React.Fragment, null, props.children);\n};\nexport const Tabs = ({ children }) => {\n    const [activeTab, setActiveTab] = useState(React.Children.toArray(children)[0].props.label);\n    const changeTab = (tab) => {\n        setActiveTab(tab);\n    };\n    let content;\n    const tabs = [];\n    React.Children.forEach(children, (child) => {\n        if (React.isValidElement(child)) {\n            const { label } = child.props;\n            tabs.push(label);\n            if (label === activeTab)\n                content = child.props.children;\n        }\n    });\n    return (React.createElement(\"div\", null,\n        React.createElement(TabButtons, { activeTab: activeTab, tabs: tabs, changeTab: changeTab }),\n        React.createElement(\"div\", { className: \"anaconda-panel-tab-content\" }, content)));\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Terminal } from \"xterm\";\nimport { FitAddon } from \"xterm-addon-fit\";\nimport { fetchLogs } from \"../../api/log\";\nimport { SVGIcons } from \"../../icons\";\nimport { LogType, STATUS_APP } from \"../../types\";\nexport const ReadOnlyTerminal = ({ app }) => {\n    const [loading, setLoading] = useState(true);\n    const terminal = new Terminal({\n        disableStdin: true, // read-only\n        fontFamily: 'Monaco, Menlo, Consolas, \"Lucida Console\", \"Courier New\", monospace',\n        fontSize: 11,\n        fontWeight: 400,\n        convertEol: true,\n        cursorBlink: true,\n    });\n    const initializeTerminal = () => {\n        const containerElement = document.getElementById(`jp-xterm-container-${app.title}`);\n        if (containerElement === null) {\n            // @TODO: handle this error\n            return;\n        }\n        const fitAddon = new FitAddon();\n        terminal.loadAddon(fitAddon);\n        terminal.open(containerElement);\n        const terminalResizer = new ResizeObserver(() => {\n            try {\n                fitAddon.fit();\n            }\n            catch (e) {\n                console.log(\"Unable to fit terminal\");\n            }\n        });\n        terminalResizer.observe(containerElement);\n    };\n    useEffect(() => {\n        const fetchOutput = async () => {\n            try {\n                const domain = app.domains[0].domain;\n                let logType;\n                switch (app.status) {\n                    case STATUS_APP.PUBLISHED:\n                        logType = LogType.SERVER_LOG;\n                        break;\n                    default:\n                        logType = LogType.ERROR_LOG;\n                }\n                const content = await fetchLogs(domain, logType);\n                if (content === null) {\n                    terminal.write(\"Could not retrieve logs. Please refresh this page.\");\n                    return;\n                }\n                if (content === \"\") {\n                    terminal.write(\"No logs to display.\");\n                    return;\n                }\n                terminal.write(content);\n            }\n            catch (err) {\n                terminal.write(\"An error has occurred. Please refresh this page.\");\n            }\n            finally {\n                setLoading(false);\n            }\n        };\n        initializeTerminal();\n        fetchOutput();\n    }, []);\n    const LoadingIcon = () => {\n        return (React.createElement(\"img\", { src: `data:image/svg+xml;base64,${SVGIcons.PUBLISHING_SECOND_VARIATION}`, alt: \"icon - publishing\", className: \"jp-xterm-loading-icon\" }));\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { id: `jp-xterm-container-${app.title}`, className: \"jp-xterm-container\" }),\n        loading ? React.createElement(LoadingIcon, null) : null));\n};\nexport default ReadOnlyTerminal;\n","import React from \"react\";\nimport { STATUS_APP } from \"../../types\";\nimport { menuAppActions } from \"../Menu/MenuApps/MenuAppActions\";\nimport { useAppMenu } from \"../Menu\";\nimport { useAppStore } from \"../../state/apps-zustand/store\";\nimport { MAX_PRO_PLUS_SUBSCRIPTIONS } from \"../../constants\";\nimport { Tooltip } from \"react-tooltip\";\nconst getStatusText = (status) => {\n    switch (status) {\n        case STATUS_APP.INACTIVE:\n            return { text: \"Publish\", iconClass: \"anaconda-app-publish-gray-icon\" };\n        case STATUS_APP.FAILED:\n            return { text: \"View Logs\", iconClass: \"anaconda-app-log-icon\" };\n        default:\n            return { text: \"View App\", iconClass: \"anaconda-app-eye-icon\" };\n    }\n};\nconst ActionButton = ({ app }) => {\n    const { text, iconClass } = getStatusText(app.status);\n    const { canPublish, appsDeployed } = useAppStore.getState();\n    const isPublishDisabled = app.status === STATUS_APP.INACTIVE &&\n        (appsDeployed > MAX_PRO_PLUS_SUBSCRIPTIONS || !canPublish);\n    const action = {\n        [STATUS_APP.INACTIVE]: menuAppActions.publish,\n        [STATUS_APP.FAILED]: menuAppActions.viewErrorLogs,\n        [STATUS_APP.PUBLISHED]: menuAppActions.viewInJupyterLab,\n        [STATUS_APP.PUBLISHING]: menuAppActions.publish,\n    }[app.status];\n    const handleCallToActionButton = () => {\n        if (action) {\n            action.execute(app);\n        }\n    };\n    return (React.createElement(\"div\", { className: \"anaconda-app-status\", onClick: handleCallToActionButton, \"data-tooltip-id\": isPublishDisabled ? \"publish-tooltip\" : \"\", style: {\n            cursor: app.status === STATUS_APP.PUBLISHING || isPublishDisabled\n                ? \"not-allowed\"\n                : \"pointer\",\n        } },\n        React.createElement(\"div\", { className: iconClass, style: {\n                background: app.status === STATUS_APP.PUBLISHING || isPublishDisabled\n                    ? \"#8C94A6\"\n                    : \"var(--jp-ui-font-color0)\",\n            } }),\n        React.createElement(\"span\", { style: {\n                color: app.status === STATUS_APP.PUBLISHING || isPublishDisabled\n                    ? \"#8C94A6\"\n                    : \"var(--jp-ui-font-color0)\",\n            } }, text),\n        isPublishDisabled && (React.createElement(Tooltip, { id: \"publish-tooltip\", className: \"jp-tooltip\", place: \"right\", positionStrategy: \"fixed\", clickable: true, style: { zIndex: 1 } },\n            React.createElement(\"p\", null, \"You've reached your limit. To publish more, unpublish an app.\")))));\n};\nexport const AppTile = ({ app }) => {\n    const { openMenu } = useAppMenu(app);\n    const openContextMenuHandler = (event) => {\n        if (event.shiftKey) {\n            // Allow shift+right click to open the browser menu\n            return;\n        }\n        event.preventDefault();\n        openMenu(event);\n    };\n    return (React.createElement(\"div\", { className: \"anaconda-app-tile\", \"data-testid\": `anaconda-app-tile-${app.title}`, onContextMenu: openContextMenuHandler },\n        React.createElement(\"div\", { className: \"anaconda-app-frame\" },\n            React.createElement(\"div\", { className: `anaconda-app-gradient-${app.status}` }),\n            React.createElement(\"div\", { className: \"anaconda-app-container\" },\n                React.createElement(\"div\", { className: \"anaconda-app-header-div\" },\n                    React.createElement(\"div\", { className: `anaconda-app-status-${app.status}-icon` }),\n                    React.createElement(\"div\", { title: app.title, className: \"anaconda-app-header-text\" },\n                        app.title,\n                        \" \"),\n                    React.createElement(\"div\", { className: \"anaconda-app-settings-icon\", onClick: openContextMenuHandler })),\n                React.createElement(\"span\", null,\n                    \"Last Update: \",\n                    app.last_updated_at,\n                    \" \"),\n                React.createElement(\"div\", { className: \"anaconda-app-status-div\" },\n                    React.createElement(\"span\", { className: `anaconda-app-version-${app.status}` }, app.versioning.current_version),\n                    React.createElement(ActionButton, { app: app }))))));\n};\n","import React from \"react\";\nimport { openInNewTab } from \"../../utils\";\nimport { loadNotebookFromURL } from \"@anaconda/notebook_load_lib\";\nimport { useAppShellStateStore } from \"../../state/app-shell-zustand/store\";\nimport { useHeapAnalytics } from \"../../state/apps-zustand/heap\";\nexport const FeaturedAppTile = ({ featuredApp, }) => {\n    const onViewApp = (event) => {\n        event.stopPropagation();\n        const { registerEvent } = useHeapAnalytics.getState();\n        registerEvent(\"nb.anaconda.cloud - Panel: Example Apps - Click\", {\n            category: featuredApp.title,\n        });\n        openInNewTab(featuredApp.domain_url);\n    };\n    const onOpenNotebook = (event) => {\n        event.stopPropagation();\n        const { app } = useAppShellStateStore.getState();\n        if (app)\n            loadNotebookFromURL(app, featuredApp.notebook_link);\n    };\n    return (React.createElement(\"div\", { className: \"anaconda-example-app-tile\", onClick: onViewApp },\n        React.createElement(\"div\", { className: \"anaconda-example-app-frame\" },\n            React.createElement(\"div\", { className: \"anaconda-example-app-gradient\" }),\n            React.createElement(\"div\", { className: \"anaconda-example-app-container\" },\n                React.createElement(\"div\", { className: \"anaconda-example-app-title\" }, featuredApp.title),\n                React.createElement(\"div\", { className: \"anaconda-example-app-preview\", style: {\n                        backgroundImage: `url(${featuredApp.preview_image})`,\n                    } }),\n                React.createElement(\"div\", { className: \"anaconda-example-app-action-div\" },\n                    React.createElement(\"div\", { className: \"anaconda-example-app-owner\", title: featuredApp.app_owner }, featuredApp.app_owner ? (featuredApp.app_owner[0]) : (React.createElement(\"i\", { className: \"fa fa-user\" }))),\n                    React.createElement(\"div\", { className: \"anaconda-example-app-actions\" },\n                        React.createElement(\"div\", { className: \"anaconda-apps-notebook-icon\", onClick: onOpenNotebook })))))));\n};\n","import React from \"react\";\nimport { useVersionMenu } from \"../Menu\";\nexport default (props) => {\n    const { openMenu } = useVersionMenu(props.value);\n    return (React.createElement(\"span\", { className: \"anaconda-apps-grid-action-button-cell\" },\n        props.value.data.isLatest && (React.createElement(\"div\", { className: \"anaconda-apps-grid-action-background\", onClick: props.value.handleOpenPublishedApp },\n            React.createElement(\"div\", { className: `anaconda-apps-preview-icon` }))),\n        React.createElement(\"div\", { onClick: openMenu, className: `anaconda-app-settings-gray-icon` })));\n};\n","import React from \"react\";\nexport default (props) => {\n    return props.value.isLatest ? (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"anaconda-apps-check-icon\" }),\n        \"Latest\")) : (props.value.version);\n};\n","import { Dialog } from \"@jupyterlab/apputils\";\nimport React from \"react\";\nimport { AppVersionsView } from \"../../views/AppVersionsView\";\nfunction createModalDialog({ options, }) {\n    const dialog = new Dialog(options);\n    dialog.launch().then(() => {\n        // Remove the host element from the DOM after the dialog is closed\n        if (options.host) {\n            options.host.remove();\n        }\n    });\n    return dialog;\n}\nfunction createHostElement(className) {\n    const host = document.createElement(\"div\");\n    host.classList.add(className);\n    document.body.appendChild(host);\n    return host;\n}\nexport function showVersionsModal(app, options = {}) {\n    const host = createHostElement(\"anaconda-versions-modal\");\n    const dialogOptions = {\n        ...options,\n        title: \"App Versions\",\n        body: React.createElement(AppVersionsView, {\n            app,\n            closeModal: () => {\n                dialog.reject();\n            },\n        }, null),\n        hasClose: true,\n        buttons: [],\n        host,\n    };\n    const dialog = createModalDialog({ options: dialogOptions });\n}\n","/**\n * Variable to set the short polling interval in seconds\n */\nexport const SHORT_POLLING_INTERVAL = 30;\n/**\n * Variable to set the long polling interval in seconds\n */\nexport const LONG_POLLING_INTERVAL = 120;\n/**\n * Staging URL for Nucleus\n */\nexport const STAGING_NUCLEUS_URL = \"https://nucleus-latest.anacondaconnect.com\";\n/**\n * Prod URL for Nucleus\n */\nexport const PROD_NUCLEUS_URL = \"https://anaconda.cloud\";\n/**\n * Number of subscriptions allowed for Pro+ users\n *\n * @TODO this should come as a response from the backend\n */\nexport const MAX_PRO_PLUS_SUBSCRIPTIONS = 4;\n/** Legal disclaimer link */\n/**\n * Legal disclaimer link\n */\nexport const LEGAL_DISCLAIMER_LINK = \"https://legal.anaconda.com/policies/en?name=offering-specific-terms#anaconda-platform-tools\";\n/**\n * Save tooltip message\n */\nexport const SAVE_TOOLTIP = \"Saving this app will associate it with the most recent version of this notebook.\";\n/**\n * View configuration tooltip message\n */\nexport const VIEW_CONFIGURATION_TOOLTIP = \"Restarting this app will run the version of the notebook it was published with. To republish with an updated version of the notebook, please unpublish and republish the app.\";\n/**\n * Limit reached message for PRO+ users\n */\nexport const LIMIT_REACHED_MESSAGE_PRO = \"You've reached your limit. To publish more, unpublish an app.\";\n/**\n * Limit reached message for Free and Starter users\n */\nexport const LIMIT_REACHED_MESSAGE_FREE = \"Limit reached. To publish more apps, upgrade.\";\nexport const TITLE_TOOLTIP = \"This title will only be visible to you.\";\nexport const DESCRIPTION_TOOLTIP = \"This description will only be visible to you.\";\nexport const UPDATE_PERMISSION_TOOLTIP = \"Permissions refer to who will be able to access your published app. Unpublished apps are always private.\";\nexport const APPCONFIG_PERMISSION_TOOLTIP = \"Permissions refer to who can access your published app. Unpublished apps are always private.\";\n","import { useAppShellStateStore } from \"../state/app-shell-zustand/store\";\nimport { TerminalIcon, publishGrayIcon } from \"../icons\";\nimport { WidgetType } from \"../types\";\nimport { ReadOnlyTerminalWidget, DeploymentWidget, MyAppsWidget, } from \"../widgets\";\nconst { addWidgetToMainArea, closeWidgetById } = useAppShellStateStore.getState();\nexport const useWidget = () => {\n    const openWidget = (widgetType = WidgetType.APP_MANAGEMENT, app, options) => {\n        // Instantiate the widget\n        let instantiatedWidget;\n        switch (widgetType) {\n            case WidgetType.DEPLOYMENT:\n                if (app) {\n                    instantiatedWidget = new DeploymentWidget(app);\n                    instantiatedWidget.title.label = `${widgetType}: ${app.title}`;\n                    instantiatedWidget.title.icon = publishGrayIcon;\n                    instantiatedWidget.id = `${widgetType}-${app.project_id}`;\n                }\n                break;\n            case WidgetType.TERMINAL:\n                if (app) {\n                    instantiatedWidget = new ReadOnlyTerminalWidget(app);\n                    instantiatedWidget.title.label = `${options?.label}`;\n                    instantiatedWidget.title.icon = TerminalIcon;\n                    instantiatedWidget.id = `${widgetType}-${app.project_id}`;\n                }\n                break;\n            default:\n                instantiatedWidget = new MyAppsWidget();\n                instantiatedWidget.title.label = \"Apps Management\";\n                instantiatedWidget.id = \"apps-management\";\n                break;\n        }\n        instantiatedWidget.title.caption = instantiatedWidget.title.label;\n        instantiatedWidget.title.closable = true;\n        // This is to also execute the close logic of the widget when the user click in the X instead of close button\n        instantiatedWidget.onBeforeDetach = () => {\n            closeWidgetById(instantiatedWidget.id);\n        };\n        // Add the widget to the main area\n        addWidgetToMainArea(instantiatedWidget, widgetType === WidgetType.APP_MANAGEMENT ? \"tab-after\" : \"split-right\");\n    };\n    return { openWidget };\n};\n","import { useEffect } from \"react\";\nimport { useAppStore } from \"../state/apps-zustand/store\";\nimport { STATUS_APP } from \"../types\";\nimport { LONG_POLLING_INTERVAL, SHORT_POLLING_INTERVAL } from \"../constants\";\nexport const usePolling = (delay) => {\n    const { getApps } = useAppStore();\n    const tick = async () => {\n        await getApps();\n    };\n    // initial request\n    useEffect(() => {\n        tick();\n    }, []);\n    // periodic requests\n    useEffect(() => {\n        if (delay <= 0) {\n            return;\n        }\n        const id = setInterval(async () => {\n            await tick();\n        }, delay);\n        return () => clearInterval(id);\n    }, [delay]);\n};\nexport const getPollingInterval = (apps) => {\n    /*  Criteria:\n      | 0. if tab is not visible -> no polling;\n      | 1. if there are any publishing apps -> polling every 30s;\n      | 2. if there are any published apps -> polling every 2min;\n      | 3. if there are only inactive apps or no apps -> no polling (requests to do either\n      |    action triggers polling).\n    */\n    const { publishing, published } = apps.reduce((acc, cur) => {\n        switch (cur.status) {\n            case STATUS_APP.PUBLISHING:\n                return { ...acc, publishing: [...acc.publishing, cur] };\n            case STATUS_APP.PUBLISHED:\n                return { ...acc, published: [...acc.published, cur] };\n            default:\n                return acc;\n        }\n    }, {\n        publishing: [],\n        published: [],\n    });\n    if (publishing.length !== 0) {\n        // 30 seconds\n        return SHORT_POLLING_INTERVAL * 1000;\n    }\n    if (published.length !== 0) {\n        // 2 minutes\n        return LONG_POLLING_INTERVAL * 1000;\n    }\n    // no polling for inactive + non-existent apps\n    return -1;\n};\n","import { useReducer, useRef, useEffect } from \"react\";\nimport { fetchProject, createApp, saveApp } from \"../api/project\";\nimport { APIRequestError } from \"../api\";\nimport { useAppStore } from \"../state/apps-zustand/store\";\nvar APIRequestType;\n(function (APIRequestType) {\n    APIRequestType[\"FETCH\"] = \"fetch\";\n    APIRequestType[\"SAVE\"] = \"save\";\n    APIRequestType[\"CREATE\"] = \"create\";\n})(APIRequestType || (APIRequestType = {}));\nvar APIActionType;\n(function (APIActionType) {\n    APIActionType[\"SET_LOADING\"] = \"SET_LOADING\";\n    APIActionType[\"SET_ERROR\"] = \"SET_ERROR\";\n    APIActionType[\"SET_CONTENT\"] = \"SET_CONTENT\";\n})(APIActionType || (APIActionType = {}));\nconst reducer = (state, action) => {\n    const { request, value } = action.payload;\n    switch (action.type) {\n        case APIActionType.SET_LOADING:\n            return {\n                ...state,\n                [request]: {\n                    ...state[request],\n                    loading: value,\n                    // This will reset the previous content and prevent some weird behaviors\n                    content: null,\n                    error: value ? null : state[request].error,\n                },\n            };\n        case APIActionType.SET_ERROR:\n            return {\n                ...state,\n                [request]: {\n                    ...state[request],\n                    error: value,\n                    content: null,\n                },\n            };\n        case APIActionType.SET_CONTENT:\n            return {\n                ...state,\n                [request]: {\n                    ...state[request],\n                    content: value,\n                    error: null,\n                },\n            };\n        default:\n            return state;\n    }\n};\n/**\n *\n * Call the API to handle all app-related requests.\n *\n * @returns array with current api status and action objects\n */\nexport const useAPI = () => {\n    // This is a workaround to prevent state updates on unmounted components and avoid memory leaks\n    const isMounted = useRef(true);\n    const { getApps } = useAppStore();\n    const [state, dispatch] = useReducer(reducer, {\n        fetch: {\n            loading: false,\n            error: null,\n            content: null,\n        },\n        save: {\n            loading: false,\n            error: null,\n            content: null,\n        },\n        create: {\n            loading: false,\n            error: null,\n            content: null,\n        },\n    });\n    // Wrapper function to prevent state updates on unmounted components\n    // The action should be type and payload\n    const dispatchAction = (action) => {\n        if (isMounted.current) {\n            dispatch(action);\n        }\n    };\n    useEffect(() => {\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    const fetch = async (fileName, appID = \"\") => {\n        dispatchAction({\n            type: APIActionType.SET_LOADING,\n            payload: { request: APIRequestType.FETCH, value: true },\n        });\n        try {\n            const content = await fetchProject(fileName, appID);\n            dispatchAction({\n                type: APIActionType.SET_LOADING,\n                payload: { request: APIRequestType.FETCH, value: false },\n            });\n            if (content) {\n                dispatchAction({\n                    type: APIActionType.SET_CONTENT,\n                    payload: { request: APIRequestType.FETCH, value: content },\n                });\n            }\n            return content;\n        }\n        catch (error) {\n            if (error instanceof Error || error instanceof APIRequestError) {\n                dispatchAction({\n                    type: APIActionType.SET_ERROR,\n                    payload: {\n                        request: APIRequestType.FETCH,\n                        value: error.message,\n                    },\n                });\n            }\n            dispatchAction({\n                type: APIActionType.SET_LOADING,\n                payload: { request: APIRequestType.FETCH, value: false },\n            });\n            return null;\n        }\n    };\n    const save = async (app) => {\n        dispatchAction({\n            type: APIActionType.SET_LOADING,\n            payload: { request: APIRequestType.SAVE, value: true },\n        });\n        try {\n            const content = await saveApp(app);\n            // Ignore error for getApps\n            await getApps().catch(() => null);\n            dispatchAction({\n                type: APIActionType.SET_LOADING,\n                payload: { request: APIRequestType.SAVE, value: false },\n            });\n            if (content) {\n                dispatchAction({\n                    type: APIActionType.SET_CONTENT,\n                    payload: { request: APIRequestType.SAVE, value: content },\n                });\n            }\n            return content;\n        }\n        catch (error) {\n            if (error instanceof Error || error instanceof APIRequestError) {\n                dispatchAction({\n                    type: APIActionType.SET_ERROR,\n                    payload: {\n                        request: APIRequestType.SAVE,\n                        value: error.message,\n                    },\n                });\n            }\n            dispatchAction({\n                type: APIActionType.SET_LOADING,\n                payload: { request: APIRequestType.SAVE, value: false },\n            });\n            return null;\n        }\n    };\n    const create = async (appID, command) => {\n        dispatchAction({\n            type: APIActionType.SET_LOADING,\n            payload: { request: APIRequestType.CREATE, value: true },\n        });\n        try {\n            const content = await createApp(appID, command);\n            // Ignore error for getApps\n            await getApps().catch(() => null);\n            dispatchAction({\n                type: APIActionType.SET_LOADING,\n                payload: { request: APIRequestType.CREATE, value: false },\n            });\n            if (content) {\n                dispatchAction({\n                    type: APIActionType.SET_CONTENT,\n                    payload: { request: APIRequestType.CREATE, value: content },\n                });\n            }\n            return content;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                dispatchAction({\n                    type: APIActionType.SET_ERROR,\n                    payload: {\n                        request: APIRequestType.CREATE,\n                        value: error.message,\n                    },\n                });\n            }\n            dispatchAction({\n                type: APIActionType.SET_LOADING,\n                payload: { request: APIRequestType.CREATE, value: false },\n            });\n            return null;\n        }\n    };\n    const actions = {\n        fetch,\n        save,\n        create,\n    };\n    return [state, actions];\n};\n","import { create } from \"zustand\";\nimport { Theme } from \"../types\";\nexport const useTheme = create((set, get) => ({\n    theme: Theme.LIGHT,\n    manager: null,\n    setThemeManager: (manager) => {\n        set({ manager });\n        // Initializes the theme state using default theme of Jupyterlab\n        const { setTheme } = get();\n        setTheme();\n        manager.themeChanged.connect((_, event) => {\n            setTheme();\n        });\n    },\n    setTheme: () => {\n        const { manager } = get();\n        if (manager !== null) {\n            const theme = manager.theme && manager.isLight(manager.theme)\n                ? Theme.LIGHT\n                : Theme.DARK;\n            set({ theme });\n        }\n    },\n}));\n","import { LabIcon } from \"@jupyterlab/ui-components\";\nimport rocketIconGraySvgStr from \"../src/style/images/rocket-icon-gray.svg\";\nimport rocketIconGreenSvgStr from \"../src/style/images/rocket-icon-green.svg\";\nimport viewSvgStr from \"../src/style/images/view.svg\";\nimport restartSvgStr from \"../src/style/images/restart.svg\";\nimport unpublishSvgStr from \"../src/style/images/unpublish.svg\";\nimport viewConfigurationSvgStr from \"../src/style/images/view-configuration.svg\";\nimport viewLogsSvgStr from \"../src/style/images/view-logs.svg\";\nimport viewJupyterLabSvgStr from \"../src/style/images/view-jupyterlab.svg\";\nimport copyLinkSvgStr from \"../src/style/images/copy-link.svg\";\nimport SettingsIcon from \"../src/style/images/settings-icon.svg\";\nimport publishingIcon from \"../src/style/images/publishing.svg\";\nimport publishing2Icon from \"../src/style/images/publishing2.svg\";\nimport failedIcon from \"../src/style/images/failed.svg\";\nimport helpIcon from \"../src/style/images/help.svg\";\nimport publishedIcon from \"../src/style/images/published.svg\";\nimport WarnIcon from \"../src/style/images/warning.svg\";\nimport TickIcon from \"../src/style/images/tick.svg\";\nimport terminalSvgStr from \"../src/style/images/terminal.svg\";\nimport fileIcon from \"../src/style/images/file.svg\";\nimport AnacondaLogo from \"../src/style/images/anaconda-logo.svg\";\nimport PageNotFoundLogo from \"../src/style/images/404.svg\";\nimport PageNotFoundBackground from \"../src/style/images/404-background.svg\";\nimport InfoIcon from \"../src/style/images/info.svg\";\nimport DeployIcon from \"../src/style/images/deploy.svg\";\nimport PanelIcon from \"../src/style/images/panel.svg\";\nexport const publishGrayIcon = new LabIcon({\n    name: \"jupyterlab_pa:publishGray\",\n    svgstr: rocketIconGraySvgStr,\n});\nexport const publishGreenIcon = new LabIcon({\n    name: \"jupyterlab_pa:publishGreen\",\n    svgstr: rocketIconGreenSvgStr,\n});\nexport const ViewIcon = new LabIcon({\n    name: \"jupyterlab_pa:view\",\n    svgstr: viewSvgStr,\n});\nexport const RestartIcon = new LabIcon({\n    name: \"jupyterlab_pa:restart\",\n    svgstr: restartSvgStr,\n});\nexport const UnPublishIcon = new LabIcon({\n    name: \"jupyterlab_pa:unpublish\",\n    svgstr: unpublishSvgStr,\n});\nexport const ViewConfigurationIcon = new LabIcon({\n    name: \"jupyterlab_pa:viewConfiguration\",\n    svgstr: viewConfigurationSvgStr,\n});\nexport const ViewLogsIcon = new LabIcon({\n    name: \"jupyterlab_pa:viewLogs\",\n    svgstr: viewLogsSvgStr,\n});\nexport const ViewJupyterLabIcon = new LabIcon({\n    name: \"jupyterlab_pa:viewJupyterLab\",\n    svgstr: viewJupyterLabSvgStr,\n});\nexport const CopyLinkIcon = new LabIcon({\n    name: \"jupyterlab_pa:copyLink\",\n    svgstr: copyLinkSvgStr,\n});\nexport const TerminalIcon = new LabIcon({\n    name: \"jupyterlab_pa:terminal\",\n    svgstr: terminalSvgStr,\n});\nexport const infoIcon = new LabIcon({\n    name: \"jupyterlab_pa:info\",\n    svgstr: InfoIcon,\n});\nexport const SVGIcons = {\n    FILE_SVG: btoa(unescape(encodeURIComponent(fileIcon))),\n    WARN_SVG: btoa(unescape(encodeURIComponent(WarnIcon))),\n    TICK_SVG: btoa(unescape(encodeURIComponent(TickIcon))),\n    FAILED: btoa(unescape(encodeURIComponent(failedIcon))),\n    HELP: btoa(unescape(encodeURIComponent(helpIcon))),\n    PUBLISHED: btoa(unescape(encodeURIComponent(publishedIcon))),\n    PUBLISHING: btoa(unescape(encodeURIComponent(publishingIcon))),\n    PUBLISHING_SECOND_VARIATION: btoa(unescape(encodeURIComponent(publishing2Icon))),\n    SETTINGS_SVG: btoa(unescape(encodeURIComponent(SettingsIcon))),\n    ANACONDA_LOGO_SVG: btoa(unescape(encodeURIComponent(AnacondaLogo))),\n    PAGENOTFOUND_LOGO: btoa(unescape(encodeURIComponent(PageNotFoundLogo))),\n    PAGENOTFOUND_BACKGROUND: btoa(unescape(encodeURIComponent(PageNotFoundBackground))),\n    INFO_SVG: btoa(unescape(encodeURIComponent(InfoIcon))),\n    PANEL_SVG: btoa(unescape(encodeURIComponent(PanelIcon))),\n    PUBLISH_GREEN_SVG: btoa(unescape(encodeURIComponent(rocketIconGreenSvgStr))),\n    DEPLOY_SVG: btoa(unescape(encodeURIComponent(DeployIcon))),\n};\n","import PanelPlugin from \"./panel_plugin\";\nexport { PanelPlugin };\n","import React from \"react\";\nimport { ReactWidget } from \"@jupyterlab/apputils\";\nimport { useWidget } from \"./hooks/OpenWidgetHook\";\nimport { WidgetType } from \"./types\";\nimport { useAppShellStateStore } from \"./state/app-shell-zustand/store\";\nimport AppCounter from \"./components/AppCounter/AppCounter\";\nimport { configureCommands, configureDocRegistry, configurePalette, loadScripts, } from \"./utils/panel\";\nimport { useFeatureFlags } from \"./state/apps-zustand/feature-flags\";\nimport { useTheme } from \"./hooks/theme\";\nimport { useHeapAnalytics } from \"./state/apps-zustand/heap\";\nimport { useCloudApiUrl } from \"@anaconda/lms_notebooks_lib\";\nexport default class PanelPlugin {\n    async activate(app, opts) {\n        const coreReady = await opts.corePlugin.ready();\n        if (!coreReady.featureFlag.getBool(\"monorepo-panel\", false)) {\n            return;\n        }\n        const hidePublishButton = !coreReady.featureFlag.getBool(\"monorepo-panel-show-publish-button\", false);\n        console.log(\"[Monorepo] Enabling the panel plugin\");\n        const { setApp, setAppShell, setCommandRegistry, setServiceManager } = useAppShellStateStore.getState();\n        setApp(app);\n        setAppShell(app.shell);\n        setCommandRegistry(app.commands);\n        setServiceManager(app.serviceManager);\n        const { setFFManager } = useFeatureFlags.getState();\n        setFFManager(coreReady.featureFlag);\n        // initialize heap analytics store\n        const { setHeapAnalytics } = useHeapAnalytics.getState();\n        setHeapAnalytics(coreReady.analytics.heap);\n        const { setApiUrl } = useCloudApiUrl.getState();\n        setApiUrl(coreReady.config.cloud.url);\n        loadScripts();\n        configurePalette(opts.palette);\n        configureDocRegistry(app, hidePublishButton);\n        configureCommands(app, opts.notebookTracker);\n        // initialize theme manager\n        const { setThemeManager } = useTheme.getState();\n        setThemeManager(opts.themeManager);\n        const panelMyAppLauncherCommand = \"anaconda-panel-launcher:open\";\n        const panelMyAppLauncherCategory = \"Anaconda\";\n        const panelMyAppLauncherLabel = \"My Apps\";\n        app.commands.addCommand(panelMyAppLauncherCommand, {\n            label: panelMyAppLauncherLabel,\n            iconClass: \"anaconda-logo-icon\",\n            execute: async () => {\n                try {\n                    const { openWidget } = useWidget();\n                    // Activating the widget\n                    openWidget(WidgetType.APP_MANAGEMENT);\n                }\n                catch (err) {\n                    //@TODO: Implement Datadog alerts\n                    console.error(\"Panel - error\", err);\n                }\n            },\n        });\n        opts.toolbarRegistry.registerFactory(\"TopBar\", \"panel-apps-counter\", () => {\n            return ReactWidget.create(React.createElement(AppCounter));\n        });\n        // Adding the command to the launcher\n        opts.launcher.add({\n            command: panelMyAppLauncherCommand,\n            category: panelMyAppLauncherCategory,\n        });\n    }\n}\n","// @TODO this was a hacky way to handle with JL. Remove once we find good approach\nimport { create } from \"zustand\";\n// Define a custom hook that returns the state and actions\nexport const useAppShellStateStore = create((set, get) => ({\n    // define the actions\n    app: null,\n    appShell: null,\n    commandRegistry: null,\n    serviceManager: null,\n    _openWidgets: new Map(),\n    environment: \"development\",\n    // define the actions\n    setApp: (app) => set({ app }),\n    setAppShell: (appShell) => set({ appShell }),\n    setCommandRegistry: (commandRegistry) => set({ commandRegistry }),\n    setServiceManager: (serviceManager) => set({ serviceManager }),\n    /**\n     * Close the current widget uisng its context\n     */\n    closeWidgetById: (widgetId) => {\n        const { _openWidgets } = get();\n        const widget = _openWidgets.get(widgetId);\n        if (widget) {\n            widget.dispose();\n            _openWidgets.delete(widgetId);\n        }\n        set({ _openWidgets });\n    },\n    closeAllWidgetsByApp: (app) => {\n        const { _openWidgets } = get();\n        for (const [key, widget] of _openWidgets) {\n            const hyphenIndex = key.indexOf(\"-\");\n            const widgetAppElement = key.substring(hyphenIndex + 1).trim();\n            if (widget &&\n                (widgetAppElement.includes(app.project_id) ||\n                    widgetAppElement.includes(app.title))) {\n                widget.dispose();\n            }\n        }\n    },\n    setEnvironment(environment) {\n        set({ environment });\n    },\n    addWidgetToMainArea: (widget, mode = \"split-right\") => {\n        const { appShell, _openWidgets } = get();\n        // Check if the widget is already open\n        const existingWidget = _openWidgets.get(widget.id);\n        if (appShell) {\n            if (existingWidget) {\n                // If the existing widget is not the current active one, make it active\n                const { getCurrentWidget } = get();\n                const currentActiveWidget = getCurrentWidget();\n                if (currentActiveWidget && currentActiveWidget !== widget.id) {\n                    appShell.activateById(widget.id);\n                }\n            }\n            else {\n                // If the widget is not already open, add it to the main area\n                appShell.add(widget, \"main\", {\n                    mode,\n                });\n                appShell.activateById(widget.id);\n                _openWidgets.set(widget.id, widget);\n                set({ _openWidgets });\n            }\n        }\n    },\n    addWidgetToOpenWidgets: (widgetId, widget) => {\n        const { _openWidgets } = get();\n        _openWidgets.set(widgetId, widget);\n        set({ _openWidgets });\n    },\n    getCurrentWidget() {\n        const { _openWidgets } = get();\n        return Array.from(_openWidgets.keys())[Array.from(_openWidgets.keys()).length - 1];\n    },\n}));\n","import { create } from \"zustand\";\nexport const useFeatureFlags = create((set, get) => ({\n    manager: null,\n    setFFManager: (manager) => {\n        set({ manager });\n    },\n    evaluateFeatureFlag: (flag, fallback = false) => {\n        const { manager } = get();\n        return manager ? manager.getBool(flag, fallback) : false;\n    },\n}));\n","import { create } from \"zustand\";\nexport const useHeapAnalytics = create((set, get) => ({\n    isHeapAnalyticsEnabled: false,\n    setHeapAnalytics: (source) => {\n        // not undefined and not null\n        if (source) {\n            set({ isHeapAnalyticsEnabled: source });\n        }\n    },\n    registerEvent: (category, data) => {\n        const { isHeapAnalyticsEnabled } = get();\n        if (isHeapAnalyticsEnabled) {\n            window.heap.track(category, data);\n        }\n    },\n}));\n","import { create } from \"zustand\";\nimport { createApp, deleteApp, deleteAppVersion, fetchApps, fetchFeaturedApps, publishApp, restartApp, unpublishApp, } from \"../../api/project\";\nexport var STATUS_REQUEST;\n(function (STATUS_REQUEST) {\n    STATUS_REQUEST[\"IDLE\"] = \"IDLE\";\n    STATUS_REQUEST[\"INITIAL_LOADING\"] = \"INITIAL_LOADING\";\n    STATUS_REQUEST[\"REFRESHING\"] = \"REFRESHING\";\n    STATUS_REQUEST[\"SUCCESS\"] = \"SUCCESS\";\n    STATUS_REQUEST[\"ERROR\"] = \"ERROR\";\n})(STATUS_REQUEST || (STATUS_REQUEST = {}));\nconst INITIAL_STATE = {\n    apps: [],\n    featuredApps: [],\n    maxApps: 0,\n    appsDeployed: 0,\n    canPublish: true,\n    // @TODO refactor statusRequest to be a hashMap of all apps requests status (unpublish, delete, ...)\n    statusRequest: STATUS_REQUEST.IDLE,\n    getAppStatusRequest: STATUS_REQUEST.IDLE,\n    error: null,\n};\n// Define a custom hook that returns the state and actions\nexport const useAppStore = create((set, get) => ({\n    //define the initial state\n    ...INITIAL_STATE,\n    // define the actions\n    getApps: async () => {\n        try {\n            // Set the INITIAL_LOADING only the first time\n            if (get().getAppStatusRequest === STATUS_REQUEST.IDLE) {\n                set({ getAppStatusRequest: STATUS_REQUEST.INITIAL_LOADING });\n            }\n            else {\n                set({ getAppStatusRequest: STATUS_REQUEST.REFRESHING });\n            }\n            const content = await fetchApps();\n            set({\n                getAppStatusRequest: STATUS_REQUEST.SUCCESS,\n                apps: content.apps,\n                maxApps: content.num_max_apps,\n                appsDeployed: content.num_active_apps,\n                canPublish: content.num_active_apps < content.num_max_apps ||\n                    // If the API brings a temporary error we will enable the publish either way\n                    content.num_max_apps === 0,\n            });\n        }\n        catch (error) {\n            // Show error screen only the first time or when the user refresh the page and has error\n            if (STATUS_REQUEST.INITIAL_LOADING === get().getAppStatusRequest ||\n                STATUS_REQUEST.IDLE === get().getAppStatusRequest) {\n                if (error instanceof Error) {\n                    set({\n                        getAppStatusRequest: STATUS_REQUEST.ERROR,\n                        error: error.message,\n                    });\n                }\n                else {\n                    set({\n                        statusRequest: STATUS_REQUEST.ERROR,\n                        error: \"Something went wrong\",\n                    });\n                }\n            }\n        }\n    },\n    getFeaturedApps: async () => {\n        try {\n            const content = await fetchFeaturedApps();\n            set({\n                featuredApps: content,\n            });\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                set({ statusRequest: STATUS_REQUEST.ERROR, error: error.message });\n            }\n            else {\n                set({\n                    statusRequest: STATUS_REQUEST.ERROR,\n                    error: \"Something went wrong\",\n                });\n            }\n        }\n    },\n    createApp: async (app_id, command) => {\n        try {\n            const domain = await createApp(app_id, command);\n            const { getApps } = get();\n            await getApps();\n            return domain?.app || null;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                set({ statusRequest: STATUS_REQUEST.ERROR, error: error.message });\n            }\n            else {\n                set({\n                    statusRequest: STATUS_REQUEST.ERROR,\n                    error: \"Something went wrong\",\n                });\n            }\n            return null;\n        }\n    },\n    deleteApp: async (projectId, domainName) => {\n        try {\n            await deleteApp(projectId, domainName);\n            const { getApps } = get();\n            await getApps();\n            return true;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                set({ statusRequest: STATUS_REQUEST.ERROR, error: error.message });\n            }\n            else {\n                set({\n                    statusRequest: STATUS_REQUEST.ERROR,\n                    error: \"Something went wrong\",\n                });\n            }\n            return false;\n        }\n    },\n    restartApp: async (domainName) => {\n        try {\n            const domain = await restartApp(domainName);\n            const { getApps } = get();\n            await getApps();\n            return domain?.app || null;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                set({ statusRequest: STATUS_REQUEST.ERROR, error: error.message });\n            }\n            else {\n                set({\n                    statusRequest: STATUS_REQUEST.ERROR,\n                    error: \"Something went wrong\",\n                });\n            }\n            return null;\n        }\n    },\n    publishApp: async (domainName) => {\n        try {\n            const domain = await publishApp(domainName);\n            const { getApps } = get();\n            await getApps();\n            return domain?.app || null;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                set({ statusRequest: STATUS_REQUEST.ERROR, error: error.message });\n            }\n            else {\n                set({\n                    statusRequest: STATUS_REQUEST.ERROR,\n                    error: \"Something went wrong\",\n                });\n            }\n            return null;\n        }\n    },\n    unpublishApp: async (domainName) => {\n        try {\n            await unpublishApp(domainName);\n            const { getApps } = get();\n            await getApps();\n            return true;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                set({ statusRequest: STATUS_REQUEST.ERROR, error: error.message });\n            }\n            else {\n                set({\n                    statusRequest: STATUS_REQUEST.ERROR,\n                    error: \"Something went wrong\",\n                });\n            }\n            return false;\n        }\n    },\n    deleteAppVersion: async (projectId, versionId) => {\n        try {\n            await deleteAppVersion(projectId, versionId);\n            const { getApps } = get();\n            await getApps();\n            return true;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                set({ statusRequest: STATUS_REQUEST.ERROR, error: error.message });\n            }\n            else {\n                set({\n                    statusRequest: STATUS_REQUEST.ERROR,\n                    error: \"Something went wrong\",\n                });\n            }\n            return false;\n        }\n    },\n    checkAppDuplicated: (title, projectId = \"\") => {\n        const { apps } = get();\n        const isDuplicated = apps.some((app) => app.title === title && app.project_id !== projectId);\n        return isDuplicated;\n    },\n    resetState: () => {\n        set(INITIAL_STATE);\n    },\n    getAppByProjectId: (projectId) => {\n        const { apps } = get();\n        return apps.find((app) => app.project_id === projectId) || null;\n    },\n}));\n","export var FORM_HEADER;\n(function (FORM_HEADER) {\n    FORM_HEADER[\"NEWAPP\"] = \"New App\";\n    FORM_HEADER[\"UPDATEAPP\"] = \"Update App\";\n    FORM_HEADER[\"APPCONFIG\"] = \"App Configuration\";\n})(FORM_HEADER || (FORM_HEADER = {}));\nexport var STATUS_APP;\n(function (STATUS_APP) {\n    STATUS_APP[\"INACTIVE\"] = \"inactive\";\n    STATUS_APP[\"PUBLISHING\"] = \"publishing\";\n    STATUS_APP[\"FAILED\"] = \"failed\";\n    STATUS_APP[\"PUBLISHED\"] = \"published\";\n})(STATUS_APP || (STATUS_APP = {}));\n/**\n * This class represent the apps in the list.\n *\n * Note: In case we need to adapt or absorb any contract change we can do it here\n * and the rest of the app will not be affected\n * @param app: IApp\n */\nexport class App {\n    project_id;\n    title;\n    description;\n    last_updated_at;\n    last_published_at;\n    notebook_file_name;\n    notebook_file_size;\n    permission;\n    environment;\n    versioning;\n    versions;\n    domains;\n    status;\n    constructor(app) {\n        this.project_id = app.project_id;\n        if (app.last_published_at) {\n            this.last_published_at = this.getFormatLastUpdated(app.last_published_at);\n        }\n        const lastVersionIndex = app.versioning.all_versions\n            ? app.versioning.all_versions.length - 1\n            : -1;\n        if (lastVersionIndex >= 0) {\n            const lastUpdated = app.versioning.all_versions[lastVersionIndex].updated_at ||\n                app.versioning.all_versions[lastVersionIndex].created_at;\n            if (lastUpdated) {\n                this.last_updated_at = this.getFormatLastUpdated(lastUpdated);\n            }\n        }\n        this.title = app.title;\n        this.description = app.description;\n        this.notebook_file_name = app.notebook_file_name;\n        this.notebook_file_size = app.notebook_file_size;\n        this.permission = app.permission;\n        this.environment = app.environment;\n        this.versioning = app.versioning;\n        this.versions = app.versioning.all_versions?.map((version) => ({\n            ...version,\n            isLatest: app.versioning.current_version === version.version,\n        }));\n        this.domains = app.domains.map((domain) => ({\n            ...domain,\n            // @TODO this two will be removed in the future and we will use domain only\n            domain: domain.domain || domain.domain_name || domain.hostname || \"\",\n        }));\n        this.status = app.status;\n    }\n    get domainUrl() {\n        return this.domains.length > 0 && this.domains[0].domain\n            ? `https://${this.domains[0].domain.split(\"://\").slice(-1)}`\n            : \"\";\n    }\n    getFormatLastUpdated(dateString) {\n        if (!dateString)\n            return \"\";\n        const date = new Date(dateString);\n        const day = date\n            .toLocaleDateString(\"en-US\", { weekday: \"short\" })\n            .replace(\",\", \"\");\n        const monthAndDay = date.toLocaleDateString(\"en-US\", {\n            month: \"short\",\n            day: \"numeric\",\n        });\n        const year = date.toLocaleDateString(\"en-US\", { year: \"numeric\" });\n        return `${day} ${monthAndDay}, ${year}`;\n    }\n    get domainName() {\n        return this.domains.length > 0 && this.domains[0].domain\n            ? this.domains[0].domain\n            : \"\";\n    }\n}\n/**\n * Various widget types\n */\nexport var WidgetType;\n(function (WidgetType) {\n    WidgetType[\"DEPLOYMENT\"] = \"deployment\";\n    WidgetType[\"TERMINAL\"] = \"terminal\";\n    WidgetType[\"APP_MANAGEMENT\"] = \"app\";\n})(WidgetType || (WidgetType = {}));\nexport var WidgetActionID;\n(function (WidgetActionID) {\n    WidgetActionID[\"MENU_VIEW_IN_JUPYTERLAB\"] = \"menu-view-in-jupyterlab\";\n    WidgetActionID[\"MENU_PUBLISH\"] = \"menu-publish\";\n    WidgetActionID[\"MENU_RESTART\"] = \"menu-restart\";\n    WidgetActionID[\"MENU_UPDATE\"] = \"menu-update\";\n    WidgetActionID[\"VIEW_CONFIGURATION\"] = \"view-configuration\";\n})(WidgetActionID || (WidgetActionID = {}));\n/**\n * Various log types\n */\nexport var LogType;\n(function (LogType) {\n    LogType[\"SERVER_LOG\"] = \"server_log\";\n    LogType[\"ERROR_LOG\"] = \"error_log\";\n})(LogType || (LogType = {}));\n/**\n * Jupyterlab themes\n */\nexport var Theme;\n(function (Theme) {\n    Theme[\"LIGHT\"] = \"light\";\n    Theme[\"DARK\"] = \"dark\";\n})(Theme || (Theme = {}));\nexport var FeatureFlag;\n(function (FeatureFlag) {\n    FeatureFlag[\"CLOUD_STORAGE\"] = \"monorepo-panel-cloud-storage\";\n    FeatureFlag[\"FEATURED_APPS\"] = \"monorepo-panels-feature-apps\";\n    FeatureFlag[\"RESOURCES\"] = \"monorepo-panel-resources\";\n})(FeatureFlag || (FeatureFlag = {}));\n/**\n * Enum representing default course titles intend to display on app management page\n */\nexport var CourseTitle;\n(function (CourseTitle) {\n    CourseTitle[\"PythonProgramming\"] = \"Introduction to Python Programming\";\n    CourseTitle[\"PandasDataAnalysis\"] = \"Introduction to pandas for Data Analysis\";\n    CourseTitle[\"DataVisualization\"] = \"Introduction to Data Visualization with Python\";\n    CourseTitle[\"DataApps\"] = \"Build and Deploy Data Apps in Anaconda Notebooks\";\n})(CourseTitle || (CourseTitle = {}));\n","import { getUserId } from \"./panel\";\n// Replace with your Appcues account ID\nconst APPCUES_ACCOUNT_ID = \"146413\";\n/**\n * This function dynamically loads the Appcues script.\n */\nexport function loadAppcuesScript() {\n    console.log(\"Loading Appcues script...\"); // Debug log\n    // Create a new script element\n    const script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = `//fast.appcues.com/${APPCUES_ACCOUNT_ID}.js`;\n    // Append the script element to the head of the document\n    document.head.appendChild(script);\n    // Set up the onload callback for the script\n    script.onload = () => {\n        console.log(\"Appcues script loaded.\"); // Debug log\n        // Set the Appcues settings on the window object\n        window.AppcuesSettings = {\n            enableURLDetection: true,\n        };\n        // Identify the user to Appcues\n        identifyUser();\n    };\n}\n/**\n * This function identifies the user to Appcues.\n */\nfunction identifyUser() {\n    console.log(\"Identifying user...\"); // Debug log\n    // Fetch the user id\n    const user = {\n        uid: getUserId(),\n    };\n    console.log(`User id: ${user.uid}`); // Debug log\n    // Check that the Appcues object is available on the window\n    if (window && window.Appcues) {\n        // Identify the user to Appcues\n        window.Appcues.identify(user.uid);\n        console.log(\"User identified to Appcues.\"); // Debug log\n    }\n}\n","import React from \"react\";\n/**\n * Remove all special characters from a string\n *\n * @param str\n * @returns string\n */\nexport const removeSpecialChars = (str) => {\n    if (!str) {\n        return \"\";\n    }\n    return str.replace(/[^a-zA-Z0-9 ]/g, \"\");\n};\nexport const getIcon = (icon, alt) => {\n    return React.createElement(\"img\", {\n        src: `data:image/svg+xml;base64,${icon}`,\n        alt: alt,\n    });\n};\n/**\n *  Open a url in a new tab\n *\n * @param url\n */\nexport const openInNewTab = (url) => {\n    if (!url) {\n        return;\n    }\n    window.open(url, \"_blank\", \"noreferrer\");\n};\n/**\n * Convert a base64 string to a blob\n */\nexport const base64ToBlob = (base64, mimeType) => {\n    const byteString = window.atob(base64);\n    const arrayBuffer = new ArrayBuffer(byteString.length);\n    const int8Array = new Uint8Array(arrayBuffer);\n    for (let i = 0; i < byteString.length; i++) {\n        int8Array[i] = byteString.charCodeAt(i);\n    }\n    const blob = new Blob([int8Array], { type: mimeType });\n    return blob;\n};\n/**\n * Should download a file receiving a blob parameter\n *\n * @param blob\n * @param fileName\n */\nexport const downloadFile = (blob, fileName) => {\n    // Other browsers\n    // Create a link pointing to the ObjectURL containing the blob\n    const blobURL = URL.createObjectURL(blob);\n    const tempLink = document.createElement(\"a\");\n    tempLink.style.display = \"none\";\n    tempLink.href = blobURL;\n    tempLink.setAttribute(\"download\", fileName);\n    // Safari thinks _blank anchor are pop ups. We only want to set _blank\n    // target if the browser does not support the HTML5 download attribute.\n    // This allows you to download files in desktop safari if pop up blocking\n    // is enabled.\n    if (typeof tempLink.download === \"undefined\") {\n        tempLink.setAttribute(\"target\", \"_blank\");\n    }\n    document.body.appendChild(tempLink);\n    tempLink.click();\n    setTimeout(() => {\n        // For Firefox it is necessary to delay revoking the ObjectURL\n        document.body.removeChild(tempLink);\n        URL.revokeObjectURL(blobURL);\n    }, 100);\n};\nexport const transformDate = (dateString) => {\n    const [datePart, timepart] = dateString.split(\" \");\n    const [time] = timepart.split(\".\");\n    return new Date(`${datePart}T${time}`);\n};\n/**\n * Finds the category to which a given course belongs.\n * @param course The course to find the category for.\n * @param categories An array of categories to search within.\n * @returns The category object containing the given course and category title.\n */\nexport const findCategorySelected = (course, categories) => {\n    for (const category of categories) {\n        if (category.courses.includes(course)) {\n            return category;\n        }\n    }\n};\n","import { ToolbarButton } from \"@jupyterlab/apputils\";\nimport tippy from \"tippy.js\";\nimport \"tippy.js/dist/tippy.css\";\nimport { showNewAppModal } from \"../components/AppModal/AppModal\";\nimport { publishGreenIcon } from \"../icons\";\nimport { useAppShellStateStore } from \"../state/app-shell-zustand/store\";\nimport { loadAppcuesScript } from \"./app-cues\";\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.paDeploy = \"notebook:deploy-to-pa\";\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A notebook widget extension that adds a PA deploy button to the toolbar.\n */\nexport class PADeployButton {\n    /**\n     * Instantiate a new PADeployButton.\n     * @param commands The command registry.\n     */\n    constructor(commands, app) {\n        this._commands = commands;\n    }\n    /**\n     * Create a new extension object.\n     */\n    createNew(panel) {\n        const button = new ToolbarButton({\n            className: \"paDeploy\",\n            icon: publishGreenIcon,\n            onClick: () => {\n                this._commands.execute(CommandIDs.paDeploy);\n            },\n        });\n        setTimeout(() => {\n            requestAnimationFrame(() => {\n                tippy(button.node, {\n                    arrow: true,\n                    content: \"Save and publish\",\n                    placement: \"bottom\",\n                });\n            });\n        }, 0);\n        panel.toolbar.insertAfter(\"cellType\", \"paDeploy\", button);\n        return button;\n    }\n    _commands;\n}\nexport function configureSettingRegistry(plugin, settingRegistry) {\n    if (settingRegistry) {\n        settingRegistry\n            .load(plugin.id)\n            .then((settings) => {\n            console.log(\"PythonAnywhere extension settings loaded:\", settings.composite);\n        })\n            .catch((reason) => {\n            console.error(\"Failed to load settings for PythonAnywhere extension.\", reason);\n        });\n    }\n}\nexport function configurePalette(palette) {\n    if (palette) {\n        const category = \"Notebook Operations\";\n        palette.addItem({ command: CommandIDs.paDeploy, category });\n    }\n}\nexport function configureDocRegistry(app, hidePublishButton) {\n    if (hidePublishButton) {\n        return;\n    }\n    const deployButton = new PADeployButton(app.commands, app);\n    app.docRegistry.addWidgetExtension(\"Notebook\", deployButton);\n    app.docRegistry.addWidgetExtension(\"Editor\", deployButton);\n}\nexport function getCurrentNotebook(app, notebooks, args) {\n    const { addWidgetToOpenWidgets } = useAppShellStateStore.getState();\n    const widget = notebooks.currentWidget;\n    const activate = args[\"activate\"] !== false;\n    console.log(notebooks.currentWidget, \"test\");\n    if (activate && widget) {\n        const notebookFilePath = widget.context.path.replace(\".ipynb\", \"\") || \"\";\n        const formWidgetId = `create-app-${notebookFilePath}`;\n        addWidgetToOpenWidgets(formWidgetId, widget);\n        app.shell.activateById(widget.id);\n    }\n    return widget;\n}\nexport function configureCommands(app, notebooks) {\n    app.commands.addCommand(CommandIDs.paDeploy, {\n        label: \"Deploy notebook to Python Anywhere\",\n        execute: async (args) => {\n            const current = getCurrentNotebook(app, notebooks, args);\n            let context;\n            console.log(\"test\", current);\n            if (current) {\n                context = current.context;\n                // save notebook file automatically when user click on PA-deploy button\n                await context.save();\n                showNewAppModal(current.context.path);\n            }\n        },\n        isEnabled: () => isWidgetEnabled(app, notebooks),\n    });\n}\nexport function isWidgetEnabled(app, notebooks) {\n    const widget = app.shell.currentWidget;\n    if (widget?.context === undefined) {\n        return false;\n    }\n    return (widget.context.path.endsWith(\".py\") ||\n        (notebooks.currentWidget !== null && notebooks.currentWidget === widget));\n}\nexport function getUserId() {\n    let userId = \"unknown-user-id\";\n    const urlPathName = document.location.pathname;\n    const regExpMatch = urlPathName.match(/\\/user\\/([^/]*)\\//i);\n    if (regExpMatch && regExpMatch.length > 0) {\n        userId = regExpMatch[1];\n    }\n    return userId;\n}\nexport function loadScripts() {\n    try {\n        loadAppcuesScript();\n    }\n    catch (error) {\n        console.error(\"Error starting AppCues tracking: \", error);\n    }\n}\n","import React, { useMemo } from \"react\";\nimport { Theme, WidgetType } from \"../types\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { useTheme } from \"../hooks/theme\";\nimport ActionCellRenderer from \"../components/VersionsModal/ActionCellRenderer\";\nimport { useAppStore } from \"../state/apps-zustand/store\";\nimport { downloadAppVersion, getAppVersion } from \"../api/project\";\nimport { base64ToBlob, downloadFile, transformDate } from \"../utils\";\nimport VersionCellRenderer from \"../components/VersionsModal/VersionCellRenderer\";\nimport { useWidget } from \"../hooks/OpenWidgetHook\";\nimport { INotification } from \"jupyterlab_toastify\";\nimport { useAppShellStateStore } from \"../state/app-shell-zustand/store\";\nimport { format } from \"date-fns\";\nexport const AppVersionsView = ({ app, closeModal, }) => {\n    const { deleteAppVersion } = useAppStore.getState();\n    const { theme } = useTheme((state) => ({\n        theme: state.theme,\n    }));\n    const defaultColDef = useMemo(() => {\n        return {\n            flex: 1,\n            minWidth: 100,\n            resizable: true,\n        };\n    }, []);\n    const columnDefs = [\n        {\n            field: \"version\",\n            sortable: true,\n            headerName: \"Version\",\n            valueGetter: (params) => {\n                return params.data;\n            },\n            cellRenderer: VersionCellRenderer,\n        },\n        {\n            field: \"created_at\",\n            headerName: \"Created\",\n            flex: 0.7,\n            valueFormatter: (params) => {\n                if (params.value) {\n                    return format(transformDate(params.value), \"MMM d, yyyy\");\n                }\n                return \"—\";\n            },\n        },\n        {\n            field: \"updated_at\",\n            headerName: \"Updated\",\n            flex: 0.7,\n            valueFormatter: (params) => {\n                if (params.value) {\n                    return format(transformDate(params.value), \"MMM d, yyyy\");\n                }\n                return \"—\";\n            },\n        },\n        {\n            field: \"last_published_at\",\n            headerName: \"Last Published\",\n            flex: 0.7,\n            valueFormatter: (params) => {\n                if (params.value) {\n                    return format(transformDate(params.value), \"MMM d, yyyy\");\n                }\n                return \"—\";\n            },\n        },\n        // {\n        //   headerName: 'Published',\n        //   flex: 0.7,\n        //   valueGetter: (params: ValueGetterParams) => {\n        //     return {\n        //       data: params.data,\n        //       handleRadioChange,\n        //     }\n        //   },\n        //   cellRenderer: PublishedCellRenderer\n        // },\n        {\n            headerName: \"Actions\",\n            valueGetter: (params) => {\n                return {\n                    data: params.data,\n                    handleDownload,\n                    handleDelete,\n                    handleOpenPublishedApp,\n                    handleCopyUrl,\n                    handleDuplicate,\n                };\n            },\n            cellRenderer: ActionCellRenderer,\n        },\n    ];\n    const handleDownload = async (data) => {\n        if (app) {\n            const fileName = `${app?.title}-${data.version}.zip`;\n            const mimeType = \"application/zip\";\n            const appDownloaded = await downloadAppVersion(app.project_id, data.id);\n            const blob = base64ToBlob(appDownloaded, mimeType);\n            downloadFile(blob, fileName);\n        }\n    };\n    const handleDuplicate = async (data) => {\n        if (app) {\n            const appVersionFiles = await getAppVersion(app.project_id, data.id);\n            const { commandRegistry } = useAppShellStateStore.getState();\n            const notebook = await commandRegistry.execute(\"notebook:create-new\");\n            await notebook.context.ready;\n            try {\n                notebook.context.model.fromJSON(appVersionFiles.notebook);\n            }\n            catch (error) {\n                console.error(error);\n                await INotification.error(\"Failed to duplicate a notebook\", {\n                    autoClose: 5000,\n                });\n            }\n        }\n    };\n    const handleOpenPublishedApp = () => {\n        closeModal();\n        const { openWidget } = useWidget();\n        if (app)\n            openWidget(WidgetType.DEPLOYMENT, app);\n    };\n    // const handleRadioChange = (data: any) => {\n    //   // @TODO Add functionality for handling radio change\n    // };\n    const handleCopyUrl = () => {\n        navigator.clipboard\n            .writeText(app?.domainUrl)\n            .then(() => {\n            INotification.success(\"Copied to clipboard\", { autoClose: 5000 });\n        })\n            .catch((error) => {\n            INotification.error(\"Failed to copy to clipboard\", { autoClose: 5000 });\n            console.error(\"Failed to copy to clipboard\", error);\n        });\n    };\n    const handleDelete = async (data) => {\n        if (app)\n            await deleteAppVersion(app.project_id, data.id);\n    };\n    return (React.createElement(\"div\", { className: theme === Theme.DARK\n            ? \"anaconda-versions-modal__grid-container ag-theme-alpine-dark\"\n            : \"anaconda-versions-modal__grid-container ag-theme-alpine\" },\n        React.createElement(AgGridReact, { columnDefs: columnDefs, rowData: app?.versions, rowSelection: \"single\", rowHeight: 60, defaultColDef: defaultColDef, suppressRowClickSelection: true, enableBrowserTooltips: true })));\n};\n","import React, { useEffect } from \"react\";\nimport { useAppStore } from \"../state/apps-zustand/store\";\nimport { FeaturedAppList } from \"../components/List/FeaturedAppList\";\nimport { useFeatureFlags } from \"../state/apps-zustand/feature-flags\";\nimport { FeatureFlag } from \"../types\";\nexport const FeaturedAppsView = () => {\n    const { featuredApps, getFeaturedApps } = useAppStore();\n    const store = useFeatureFlags.getState();\n    const isFeaturedAppsFFEnabled = store.evaluateFeatureFlag(FeatureFlag.FEATURED_APPS);\n    useEffect(() => {\n        getFeaturedApps();\n    }, []);\n    return (isFeaturedAppsFFEnabled &&\n        featuredApps.length > 0 && React.createElement(FeaturedAppList, { featuredApps: featuredApps }));\n};\n","import React, { useEffect } from \"react\";\nimport { STATUS_REQUEST, useAppStore } from \"../state/apps-zustand/store\";\nimport { DotLoader } from \"react-spinners\";\nimport { AppList } from \"../components/List/AppList\";\nexport const MyAppsView = () => {\n    const { apps, getApps, getAppStatusRequest } = useAppStore();\n    useEffect(() => {\n        getApps();\n    }, []);\n    return (React.createElement(React.Fragment, null, getAppStatusRequest === STATUS_REQUEST.INITIAL_LOADING ? (React.createElement(\"div\", { className: \"loading-container\" },\n        React.createElement(DotLoader, { color: \"#f37626\" }))) : getAppStatusRequest === STATUS_REQUEST.ERROR ? (React.createElement(\"div\", { className: \"anaconda-apps-error\" },\n        React.createElement(\"div\", { className: \"anaconda-apps-tile-left-border\" }),\n        React.createElement(\"div\", { className: \"anaconda-apps-error-message\" }, \"Something went wrong. Please try again later.\"))) : apps.length === 0 ? (React.createElement(\"div\", { className: \"anaconda-app-subheader\" },\n        React.createElement(\"p\", { style: { display: \"flex\" } },\n            \"Click the \",\n            React.createElement(\"span\", { className: \"anaconda-app-publish-green-icon\" })),\n        React.createElement(\"p\", null,\n            \"icon in a notebook to publish it as an app. Not sure where to start? To learn more about creating your first app, check out our\",\n            \" \",\n            React.createElement(\"a\", { href: \"https://learning.anaconda.cloud/build-and-deploy-data-apps-in-anaconda-notebooks/80377\", target: \"_blank\" },\n                \" \",\n                \"free course\"),\n            \", and follow along in the\",\n            \" \",\n            React.createElement(\"a\", { href: \"https://github.com/philippjfr/build_and_deploy_course/blob/main/simple.ipynb\", target: \"_blank\" }, \"sample notebook.\")))) : (React.createElement(React.Fragment, null, apps.length > 0 && React.createElement(AppList, { title: \"My Apps\", apps: apps })))));\n};\n","import React from \"react\";\nimport { ResourcesList } from \"../components/List/ResourcesList\";\nimport { useLMSContentFetch } from \"@anaconda/lms_notebooks_lib\";\nimport { FeatureFlag } from \"../types\";\nimport { useFeatureFlags } from \"../state/apps-zustand/feature-flags\";\nexport const ResourcesView = () => {\n    const { categories } = useLMSContentFetch();\n    const store = useFeatureFlags.getState();\n    const isResourcesFFEnabled = store.evaluateFeatureFlag(FeatureFlag.RESOURCES);\n    const courses = categories.flatMap((category) => category.courses);\n    return (isResourcesFFEnabled &&\n        categories.length > 0 && (React.createElement(ResourcesList, { courses: courses, categories: categories })));\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport { CancelButton, PublishButton } from \"../components/Button/FormButtons\";\nimport { LEGAL_DISCLAIMER_LINK, LIMIT_REACHED_MESSAGE_FREE, LIMIT_REACHED_MESSAGE_PRO, MAX_PRO_PLUS_SUBSCRIPTIONS, UPDATE_PERMISSION_TOOLTIP, } from \"../constants\";\nimport { useAPI } from \"../hooks/project\";\nimport { SVGIcons } from \"../icons\";\nimport { App, STATUS_APP, WidgetType } from \"../types\";\nimport { removeSpecialChars } from \"../utils\";\nimport { useWidget } from \"../hooks/OpenWidgetHook\";\nimport { useAppStore } from \"../state/apps-zustand/store\";\nexport const PANEL_CMD = \"panel serve my-notebook.py --show --autoreload --liveness\";\n// Set initial state used in the form\nconst INITIAL_STATE = {\n    project_id: \"\",\n    title: \"\",\n    description: \"\",\n    notebook_file_name: \"\",\n    notebook_file_size: \"\",\n    permission: \"Public\",\n    environment: \"base\",\n    versioning: {\n        next_version: \"\",\n        current_version: \"\",\n        all_versions: [],\n    },\n};\nexport const CreateAppView = ({ notebookFilePath, closeCreateAppModal, }) => {\n    const { canPublish, appsDeployed, checkAppDuplicated } = useAppStore();\n    const notebookFileName = notebookFilePath.split(\"/\").pop() || \"\";\n    const { apps } = useAppStore();\n    const [appState, setAppState] = useState({\n        ...INITIAL_STATE,\n        title: removeSpecialChars(notebookFileName),\n        notebook_file_name: notebookFilePath,\n    });\n    const [apiState, apiActions] = useAPI();\n    const isTitleDuplicated = checkAppDuplicated(appState.title.trim(), appState.project_id);\n    /**\n     * Add project info to local state\n     */\n    useEffect(() => {\n        async function fetchProject() {\n            try {\n                let project = await apiActions.fetch(notebookFilePath);\n                const existingProject = apps.find((app) => app.notebook_file_name === `./${notebookFilePath}`);\n                if (project === null) {\n                    setAppState({\n                        ...INITIAL_STATE,\n                    });\n                    return;\n                }\n                if (existingProject) {\n                    project = {\n                        ...project,\n                        project_id: existingProject.project_id,\n                        versioning: existingProject.versioning,\n                        last_published_at: existingProject.last_published_at,\n                    };\n                }\n                setAppState({\n                    ...project,\n                });\n            }\n            catch (error) {\n                console.log(error);\n            }\n        }\n        fetchProject();\n    }, []);\n    const handlePublish = async () => {\n        let app = appState;\n        // Call save everytime\n        app = await apiActions.save({\n            ...appState,\n            title: appState.title.trim(),\n        });\n        if (app === null) {\n            return;\n        }\n        setAppState({\n            ...app,\n        });\n        const domain = await apiActions.create(app.project_id, PANEL_CMD);\n        if (domain === null) {\n            return;\n        }\n        const appDomains = domain && domain.length > 0 ? [domain.app] : [];\n        const status = STATUS_APP.PUBLISHING;\n        const newApp = new App({ ...app, status, domains: appDomains });\n        closeCreateAppModal();\n        const { openWidget } = useWidget();\n        openWidget(WidgetType.APP_MANAGEMENT, newApp);\n    };\n    const publishSuccess = !!apiState.create.content;\n    const isDisabled = !!apiState.fetch.error ||\n        !!apiState.fetch.loading ||\n        apiState.save.loading ||\n        apiState.create.loading ||\n        publishSuccess;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"form\", { className: \"jp-PublishAppForm\" },\n            isTitleDuplicated ? (React.createElement(\"p\", { className: \"jp-PublishAppForm-text-validation-error\" },\n                \"\\\"\",\n                appState.title,\n                \".ipynb\\\" already exists. Please choose a different name for your notebook, or delete the existing app with the same name.\")) : (\"\"),\n            !canPublish ? (React.createElement(\"p\", { className: \"jp-PublishAppForm-text-validation-error\" }, appsDeployed < MAX_PRO_PLUS_SUBSCRIPTIONS\n                ? LIMIT_REACHED_MESSAGE_FREE\n                : LIMIT_REACHED_MESSAGE_PRO)) : (\"\"),\n            React.createElement(\"label\", null, \"File\"),\n            React.createElement(\"div\", { className: \"jp-flex-row\" },\n                React.createElement(\"img\", { style: { width: \"30px\" }, src: \"data:image/svg+xml;base64,\" + SVGIcons.FILE_SVG, alt: \"File Logo\" }),\n                React.createElement(\"div\", { className: \"jp-PublishAppForm-text-gray jp-file-info\" },\n                    React.createElement(\"div\", { className: \"jp-file-name\" }, notebookFileName),\n                    React.createElement(\"div\", { className: \"jp-text-small\" }, appState.notebook_file_size))),\n            React.createElement(\"label\", null, \"Version\"),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-text-gray jp-PublishAppForm-version\" }, appState.versioning.next_version),\n            React.createElement(\"label\", null,\n                \"Permissions\",\n                React.createElement(\"img\", { style: { marginLeft: \"8px\", display: \"inline\" }, \"data-tooltip-id\": \"permission-tooltip\", src: \"data:image/svg+xml;base64,\" + SVGIcons.INFO_SVG, alt: \"Info\" })),\n            React.createElement(Tooltip, { id: \"permission-tooltip\", className: \"jp-tooltip\", place: \"right\", positionStrategy: \"fixed\", clickable: true, style: { zIndex: 1 } },\n                React.createElement(\"p\", null, UPDATE_PERMISSION_TOOLTIP)),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-text-gray\" }, appState.permission),\n            React.createElement(\"label\", null, \"Environment\"),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-text-gray\" }, appState.environment),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-text-panel-tip\" },\n                \"Use\",\n                \" \",\n                React.createElement(\"img\", { style: { width: \"12px\", display: \"inline\" }, src: \"data:image/svg+xml;base64,\" + SVGIcons.PANEL_SVG }),\n                \" \",\n                \"Preview side panel to select, arrange and resize panels in your application before deployment\"),\n            React.createElement(\"p\", { className: \"jp-PublishAppForm-text-legal-info\" },\n                \"This site is hosted by Anaconda. Publishing this content is at your own risk. To learn more about our web services, read our\",\n                \" \",\n                React.createElement(\"a\", { href: LEGAL_DISCLAIMER_LINK, target: \"_blank\" }, \"Terms and Conditions\"),\n                \".\"),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-button-div\" },\n                React.createElement(\"div\", { className: \"jp-PublishAppForm-button-div-right\" },\n                    React.createElement(CancelButton, { cancel: () => closeCreateAppModal() }),\n                    (appsDeployed < MAX_PRO_PLUS_SUBSCRIPTIONS || canPublish) &&\n                        !isTitleDuplicated ? (React.createElement(PublishButton, { handlePublish: handlePublish, hasError: !!apiState.create.error || !!apiState.save.error, isDisabled: isDisabled, labelLoading: \"Publishing\", isLoading: apiState.create.loading || apiState.save.loading, publishSuccess: publishSuccess, canPublish: canPublish })) : (\"\"))))));\n};\n","export * from \"./MyAppsView\";\n","import React, { useState } from \"react\";\nimport { SVGIcons } from \"../icons\";\nimport { LEGAL_DISCLAIMER_LINK, UPDATE_PERMISSION_TOOLTIP } from \"../constants\";\nimport { Tooltip } from \"react-tooltip\";\nimport { menuAppActions } from \"../components/Menu/MenuApps/MenuAppActions\";\nimport { CloseButton, RestartButton, UnPublishButton, } from \"../components/Button/FormButtons\";\nexport const ViewAppConfig = ({ app, closeViewAppModal, }) => {\n    const [isUnPublishing, setIsUnPublishing] = useState(false);\n    const [isRestarting, setIsRestarting] = useState(false);\n    const handleRestart = async () => {\n        closeViewAppModal();\n        if (!app || !app.domainName) {\n            return;\n        }\n        setIsRestarting(true);\n        const restartApp = menuAppActions.restart.execute;\n        try {\n            await restartApp(app);\n        }\n        catch (err) {\n            console.error(err);\n        }\n        setIsRestarting(false);\n    };\n    const handleUnPublish = async () => {\n        closeViewAppModal();\n        if (!app || !app.domainName) {\n            return;\n        }\n        const unpublishApp = menuAppActions.unpublish.execute;\n        try {\n            await unpublishApp(app);\n        }\n        catch (err) {\n            console.error(err);\n        }\n        setIsUnPublishing(false);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"form\", { className: \"jp-PublishAppForm\" },\n            React.createElement(\"label\", null, \"File\"),\n            React.createElement(\"div\", { className: \"jp-flex-row\" },\n                React.createElement(\"img\", { style: { width: \"30px\" }, src: \"data:image/svg+xml;base64,\" + SVGIcons.FILE_SVG, alt: \"File Logo\" }),\n                React.createElement(\"div\", { className: \"jp-PublishAppForm-text-gray jp-file-info\" },\n                    React.createElement(\"div\", { className: \"jp-file-name\" }, app.notebook_file_name),\n                    React.createElement(\"div\", { className: \"jp-text-small\" }, app.notebook_file_size))),\n            React.createElement(\"label\", null, \"Version\"),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-text-gray jp-PublishAppForm-version\" }, app.versioning.current_version),\n            React.createElement(\"label\", null,\n                \"Permissions\",\n                React.createElement(\"img\", { style: { marginLeft: \"8px\", display: \"inline\" }, \"data-tooltip-id\": \"permission-tooltip\", src: \"data:image/svg+xml;base64,\" + SVGIcons.INFO_SVG, alt: \"Info\" })),\n            React.createElement(Tooltip, { id: \"permission-tooltip\", className: \"jp-tooltip\", place: \"right\", positionStrategy: \"fixed\", clickable: true, style: { zIndex: 1 } },\n                React.createElement(\"p\", null, UPDATE_PERMISSION_TOOLTIP)),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-text-gray\" }, app.permission),\n            React.createElement(\"label\", null, \"Environment\"),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-text-gray\" }, app.environment),\n            React.createElement(\"p\", { className: \"jp-PublishAppForm-text-legal-info\" },\n                \"This site is hosted by Anaconda. Publishing this content is at your own risk. To learn more about our web services, read our\",\n                \" \",\n                React.createElement(\"a\", { href: LEGAL_DISCLAIMER_LINK, target: \"_blank\" }, \"Terms and Conditions\"),\n                \".\"),\n            React.createElement(\"div\", { className: \"jp-PublishAppForm-button-div\" },\n                React.createElement(\"div\", { className: \"jp-PublishAppForm-button-div-right\" },\n                    React.createElement(CloseButton, { cancel: () => closeViewAppModal() }),\n                    React.createElement(RestartButton, { handleRestart: handleRestart, labelLoading: \"Restarting\", isLoading: isRestarting }),\n                    React.createElement(UnPublishButton, { handleUnPublish: handleUnPublish, labelLoading: \"Unpublishing\", isLoading: isUnPublishing }))))));\n};\n","import React from \"react\";\nimport { CreateAppView } from \"../views/createAppView\";\nimport { Tab, Tabs } from \"../components/Tabs/Tabs\";\nimport { AppVersionsView } from \"../views/AppVersionsView\";\nimport { useAppStore } from \"../state/apps-zustand/store\";\nimport { useFeatureFlags } from \"../state/apps-zustand/feature-flags\";\nimport { FeatureFlag } from \"../types\";\nexport const CreateAppWidget = (props) => {\n    const { apps } = useAppStore();\n    const title = props.notebookFilePath\n        .split(\"/\")\n        .slice(-1)[0]\n        ?.replace(/\\.[^.]+$/, \"\") || \"\";\n    const existingApp = apps.find((app) => app.title === title &&\n        app.notebook_file_name === `./${props.notebookFilePath}`);\n    const store = useFeatureFlags.getState();\n    const isCloudStorageFFEnabled = store.evaluateFeatureFlag(FeatureFlag.CLOUD_STORAGE);\n    const modalContent = document.querySelector(\".anaconda-apps-modal .jp-Dialog-content\");\n    if (modalContent) {\n        modalContent.style.minHeight =\n            existingApp && isCloudStorageFFEnabled ? \"525px\" : \"460px\";\n        modalContent.style.width = isCloudStorageFFEnabled ? \"806px\" : \"520px\";\n    }\n    return (React.createElement(React.Fragment, null, isCloudStorageFFEnabled && existingApp ? (React.createElement(Tabs, null,\n        React.createElement(Tab, { label: \"Configuration\" },\n            React.createElement(CreateAppView, { ...props })),\n        React.createElement(Tab, { label: \"Versions\" },\n            React.createElement(AppVersionsView, { app: existingApp, closeModal: props.closeCreateAppModal })))) : (React.createElement(CreateAppView, { ...props }))));\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Widget } from \"@lumino/widgets\";\nimport { Deployment } from \"../components/DeploymentDashboard/Deployment\";\nexport class DeploymentWidget extends Widget {\n    _app;\n    constructor(app) {\n        super();\n        this._app = app;\n        this.addClass(\"jp-CustomWidget\");\n        this.addClass(\"jp-Deployment\");\n    }\n    onAfterAttach() {\n        ReactDOM.render(React.createElement(Deployment, { url: this._app.domainUrl }), this.node);\n    }\n    onBeforeDetach() {\n        ReactDOM.unmountComponentAtNode(this.node);\n    }\n}\n","import { ReactWidget } from \"@jupyterlab/apputils\";\nimport React from \"react\";\nimport { MyAppsView } from \"../views\";\nimport { HelpButton } from \"../components/HelpButton/HelpButton\";\nimport { FeaturedAppsView } from \"../views/FeaturedAppsView\";\nimport { ResourcesView } from \"../views/ResourcesView\";\nexport class MyAppsWidget extends ReactWidget {\n    render() {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: \"anaconda-app-launcher\" },\n                React.createElement(\"div\", { className: \"anaconda-app-div\" },\n                    React.createElement(\"div\", { className: \"anaconda-app-header\" },\n                        React.createElement(\"h3\", null, \" Apps Management \"),\n                        React.createElement(HelpButton, null)),\n                    React.createElement(MyAppsView, null),\n                    React.createElement(FeaturedAppsView, null),\n                    React.createElement(ResourcesView, null)))));\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Widget } from \"@lumino/widgets\";\nimport { ReadOnlyTerminal } from \"../components/Terminal/ReadOnlyTerminal\";\nexport class ReadOnlyTerminalWidget extends Widget {\n    _app;\n    constructor(app) {\n        super();\n        this._app = app;\n        this.addClass(\"jp-CustomWidget\");\n        this.addClass(\"jp-ReadOnlyTerminal\");\n    }\n    onAfterAttach() {\n        ReactDOM.render(React.createElement(ReadOnlyTerminal, { app: this._app }), this.node);\n    }\n    onBeforeDetach() {\n        ReactDOM.unmountComponentAtNode(this.node);\n    }\n}\n","import React from \"react\";\nimport { ReactWidget } from \"@jupyterlab/apputils\";\nimport { NotebookList } from \"@anaconda/lms_notebooks_lib\";\nimport { useAppShellStateStore } from \"../state/app-shell-zustand/store\";\nexport class ResourceWidget extends ReactWidget {\n    course;\n    categorySelected;\n    constructor(course, categorySelected) {\n        super();\n        this.course = course;\n        this.categorySelected = categorySelected;\n    }\n    render() {\n        const { app } = useAppShellStateStore.getState();\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: \"anaconda-app-launcher\" }, app && (React.createElement(NotebookList, { notebooks: this.course.notebooks, courseSelected: this.course, categorySelected: this.categorySelected, app: app })))));\n    }\n}\n","import React from \"react\";\nimport { FeatureFlag } from \"../types\";\nimport { ViewAppConfig } from \"../views/viewAppConfig\";\nimport { Tab, Tabs } from \"../components/Tabs/Tabs\";\nimport { AppVersionsView } from \"../views/AppVersionsView\";\nimport { useFeatureFlags } from \"../state/apps-zustand/feature-flags\";\nexport const ViewAppWidget = (props) => {\n    const store = useFeatureFlags.getState();\n    const isCloudStorageFFEnabled = store.evaluateFeatureFlag(FeatureFlag.CLOUD_STORAGE);\n    setTimeout(() => {\n        const modalContent = document.querySelector(\".anaconda-apps-modal .jp-Dialog-content\");\n        if (modalContent) {\n            modalContent.style.minHeight = isCloudStorageFFEnabled\n                ? \"525px\"\n                : \"460px\";\n            modalContent.style.width = isCloudStorageFFEnabled ? \"806px\" : \"520px\";\n        }\n    }, 0);\n    return (React.createElement(React.Fragment, null, isCloudStorageFFEnabled ? (React.createElement(Tabs, null,\n        React.createElement(Tab, { label: \"Configuration\" },\n            React.createElement(ViewAppConfig, { ...props })),\n        React.createElement(Tab, { label: \"Versions\" },\n            React.createElement(AppVersionsView, { app: props.app, closeModal: props.closeViewAppModal })))) : (React.createElement(ViewAppConfig, { ...props }))));\n};\n","export * from \"./ReadOnlyTerminalWidget\";\nexport * from \"./DeploymentWidget\";\nexport * from \"./MyAppsWidget\";\n"],"names":[],"sourceRoot":""}